(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('path'), require('events'), require('stream'), require('http'), require('url'), require('https'), require('zlib'), require('fs'), require('util'), require('sharp')) :
  typeof define === 'function' && define.amd ? define(['exports', 'path', 'events', 'stream', 'http', 'url', 'https', 'zlib', 'fs', 'util', 'sharp'], factory) :
  (global = global || self, factory(global.plaiceholder = {}, global.path, global.events, global.stream, global.http, global.url, global.https, global.zlib, global.fs, global.util, global.sharp));
}(this, (function (exports, path, require$$1, Stream, http, Url, https, zlib, fs, require$$0, sharp) {
  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
  var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
  var Stream__default = /*#__PURE__*/_interopDefaultLegacy(Stream);
  var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
  var Url__default = /*#__PURE__*/_interopDefaultLegacy(Url);
  var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
  var zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib);
  var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
  var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
  var sharp__default = /*#__PURE__*/_interopDefaultLegacy(sharp);

  const getBase64 = ({
    data,
    info
  }) => `data:image/${info.format};base64,${data.toString("base64")}`;

  const digitCharacters = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "#", "$", "%", "*", "+", ",", "-", ".", ":", ";", "=", "?", "@", "[", "]", "^", "_", "{", "|", "}", "~"];
  const encode83 = (n, length) => {
    var result = "";

    for (let i = 1; i <= length; i++) {
      let digit = Math.floor(n) / Math.pow(83, length - i) % 83;
      result += digitCharacters[Math.floor(digit)];
    }

    return result;
  };

  const sRGBToLinear = value => {
    let v = value / 255;

    if (v <= 0.04045) {
      return v / 12.92;
    } else {
      return Math.pow((v + 0.055) / 1.055, 2.4);
    }
  };
  const linearTosRGB = value => {
    let v = Math.max(0, Math.min(1, value));

    if (v <= 0.0031308) {
      return Math.round(v * 12.92 * 255 + 0.5);
    } else {
      return Math.round((1.055 * Math.pow(v, 1 / 2.4) - 0.055) * 255 + 0.5);
    }
  };
  const sign = n => n < 0 ? -1 : 1;
  const signPow = (val, exp) => sign(val) * Math.pow(Math.abs(val), exp);

  class ValidationError extends Error {
    constructor(message) {
      super(message);
      this.name = "ValidationError";
      this.message = message;
    }

  }

  const bytesPerPixel = 4;

  const multiplyBasisFunction = (pixels, width, height, basisFunction) => {
    let r = 0;
    let g = 0;
    let b = 0;
    const bytesPerRow = width * bytesPerPixel;

    for (let x = 0; x < width; x++) {
      for (let y = 0; y < height; y++) {
        const basis = basisFunction(x, y);
        r += basis * sRGBToLinear(pixels[bytesPerPixel * x + 0 + y * bytesPerRow]);
        g += basis * sRGBToLinear(pixels[bytesPerPixel * x + 1 + y * bytesPerRow]);
        b += basis * sRGBToLinear(pixels[bytesPerPixel * x + 2 + y * bytesPerRow]);
      }
    }

    let scale = 1 / (width * height);
    return [r * scale, g * scale, b * scale];
  };

  const encodeDC = value => {
    const roundedR = linearTosRGB(value[0]);
    const roundedG = linearTosRGB(value[1]);
    const roundedB = linearTosRGB(value[2]);
    return (roundedR << 16) + (roundedG << 8) + roundedB;
  };

  const encodeAC = (value, maximumValue) => {
    let quantR = Math.floor(Math.max(0, Math.min(18, Math.floor(signPow(value[0] / maximumValue, 0.5) * 9 + 9.5))));
    let quantG = Math.floor(Math.max(0, Math.min(18, Math.floor(signPow(value[1] / maximumValue, 0.5) * 9 + 9.5))));
    let quantB = Math.floor(Math.max(0, Math.min(18, Math.floor(signPow(value[2] / maximumValue, 0.5) * 9 + 9.5))));
    return quantR * 19 * 19 + quantG * 19 + quantB;
  };

  const encode = (pixels, width, height, componentX, componentY) => {
    if (componentX < 1 || componentX > 9 || componentY < 1 || componentY > 9) {
      throw new ValidationError("BlurHash must have between 1 and 9 components");
    }

    if (width * height * 4 !== pixels.length) {
      throw new ValidationError("Width and height must match the pixels array");
    }

    let factors = [];

    for (let y = 0; y < componentY; y++) {
      for (let x = 0; x < componentX; x++) {
        const normalisation = x == 0 && y == 0 ? 1 : 2;
        const factor = multiplyBasisFunction(pixels, width, height, (i, j) => normalisation * Math.cos(Math.PI * x * i / width) * Math.cos(Math.PI * y * j / height));
        factors.push(factor);
      }
    }

    const dc = factors[0];
    const ac = factors.slice(1);
    let hash = "";
    let sizeFlag = componentX - 1 + (componentY - 1) * 9;
    hash += encode83(sizeFlag, 1);
    let maximumValue;

    if (ac.length > 0) {
      let actualMaximumValue = Math.max(...ac.map(val => Math.max(...val)));
      let quantisedMaximumValue = Math.floor(Math.max(0, Math.min(82, Math.floor(actualMaximumValue * 166 - 0.5))));
      maximumValue = (quantisedMaximumValue + 1) / 166;
      hash += encode83(quantisedMaximumValue, 1);
    } else {
      maximumValue = 1;
      hash += encode83(0, 1);
    }

    hash += encode83(encodeDC(dc), 4);
    ac.forEach(factor => {
      hash += encode83(encodeAC(factor, maximumValue), 2);
    });
    return hash;
  };

  const getBlurhash = ({
    data,
    info
  }) => {
    const {
      width,
      height
    } = info;
    const hash = encode(new Uint8ClampedArray(data), width, height, 4, 4);
    return {
      width,
      height,
      hash
    };
  };

  const rgb$1 = channels => `rgb${channels.length === 4 ? "a" : ""}(${channels.join(",")})`;

  const getCSS = ({
    info,
    rows
  }) => {
    const linearGradients = rows.map(row => {
      const pixels = row.map(pixel => rgb$1(pixel));
      const gradient = pixels.map((pixel, i) => {
        const start = i === 0 ? "" : ` ${i / pixels.length * 100}%`;
        const end = i === pixels.length ? "" : ` ${(i + 1) / pixels.length * 100}%`;
        return `${pixel}${start}${end}`;
      }).join(",");
      return `linear-gradient(90deg, ${gradient})`;
    });

    if (linearGradients.length !== info.height) {
      console.error("Woops! Something went wrong here and caused the color height to differ from the source height.");
    }

    const backgroundPosition = linearGradients.map((_, i) => i === 0 ? "0 0 " : `0 ${i / (linearGradients.length - 1) * 100}%`).join(",");
    const backgroundSize = `100% ${100 / linearGradients.length}%`;
    return {
      backgroundImage: linearGradients.join(","),
      backgroundPosition,
      backgroundSize,
      backgroundRepeat: "no-repeat"
    };
  };

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var clone_1 = createCommonjsModule(function (module) {
    var clone = function () {

      function _instanceof(obj, type) {
        return type != null && obj instanceof type;
      }

      var nativeMap;

      try {
        nativeMap = Map;
      } catch (_) {
        // maybe a reference error because no `Map`. Give it a dummy value that no
        // value will ever be an instanceof.
        nativeMap = function () {};
      }

      var nativeSet;

      try {
        nativeSet = Set;
      } catch (_) {
        nativeSet = function () {};
      }

      var nativePromise;

      try {
        nativePromise = Promise;
      } catch (_) {
        nativePromise = function () {};
      }
      /**
       * Clones (copies) an Object using deep copying.
       *
       * This function supports circular references by default, but if you are certain
       * there are no circular references in your object, you can save some CPU time
       * by calling clone(obj, false).
       *
       * Caution: if `circular` is false and `parent` contains circular references,
       * your program may enter an infinite loop and crash.
       *
       * @param `parent` - the object to be cloned
       * @param `circular` - set to true if the object to be cloned may contain
       *    circular references. (optional - true by default)
       * @param `depth` - set to a number if the object is only to be cloned to
       *    a particular depth. (optional - defaults to Infinity)
       * @param `prototype` - sets the prototype to be used when cloning an object.
       *    (optional - defaults to parent prototype).
       * @param `includeNonEnumerable` - set to true if the non-enumerable properties
       *    should be cloned as well. Non-enumerable properties on the prototype
       *    chain will be ignored. (optional - false by default)
      */


      function clone(parent, circular, depth, prototype, includeNonEnumerable) {
        if (typeof circular === 'object') {
          depth = circular.depth;
          prototype = circular.prototype;
          includeNonEnumerable = circular.includeNonEnumerable;
          circular = circular.circular;
        } // maintain two arrays for circular references, where corresponding parents
        // and children have the same index


        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != 'undefined';
        if (typeof circular == 'undefined') circular = true;
        if (typeof depth == 'undefined') depth = Infinity; // recurse this function so we don't reset allParents and allChildren

        function _clone(parent, depth) {
          // cloning null always returns null
          if (parent === null) return null;
          if (depth === 0) return parent;
          var child;
          var proto;

          if (typeof parent != 'object') {
            return parent;
          }

          if (_instanceof(parent, nativeMap)) {
            child = new nativeMap();
          } else if (_instanceof(parent, nativeSet)) {
            child = new nativeSet();
          } else if (_instanceof(parent, nativePromise)) {
            child = new nativePromise(function (resolve, reject) {
              parent.then(function (value) {
                resolve(_clone(value, depth - 1));
              }, function (err) {
                reject(_clone(err, depth - 1));
              });
            });
          } else if (clone.__isArray(parent)) {
            child = [];
          } else if (clone.__isRegExp(parent)) {
            child = new RegExp(parent.source, __getRegExpFlags(parent));
            if (parent.lastIndex) child.lastIndex = parent.lastIndex;
          } else if (clone.__isDate(parent)) {
            child = new Date(parent.getTime());
          } else if (useBuffer && Buffer.isBuffer(parent)) {
            if (Buffer.allocUnsafe) {
              // Node.js >= 4.5.0
              child = Buffer.allocUnsafe(parent.length);
            } else {
              // Older Node.js versions
              child = new Buffer(parent.length);
            }

            parent.copy(child);
            return child;
          } else if (_instanceof(parent, Error)) {
            child = Object.create(parent);
          } else {
            if (typeof prototype == 'undefined') {
              proto = Object.getPrototypeOf(parent);
              child = Object.create(proto);
            } else {
              child = Object.create(prototype);
              proto = prototype;
            }
          }

          if (circular) {
            var index = allParents.indexOf(parent);

            if (index != -1) {
              return allChildren[index];
            }

            allParents.push(parent);
            allChildren.push(child);
          }

          if (_instanceof(parent, nativeMap)) {
            parent.forEach(function (value, key) {
              var keyChild = _clone(key, depth - 1);

              var valueChild = _clone(value, depth - 1);

              child.set(keyChild, valueChild);
            });
          }

          if (_instanceof(parent, nativeSet)) {
            parent.forEach(function (value) {
              var entryChild = _clone(value, depth - 1);

              child.add(entryChild);
            });
          }

          for (var i in parent) {
            var attrs;

            if (proto) {
              attrs = Object.getOwnPropertyDescriptor(proto, i);
            }

            if (attrs && attrs.set == null) {
              continue;
            }

            child[i] = _clone(parent[i], depth - 1);
          }

          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(parent);

            for (var i = 0; i < symbols.length; i++) {
              // Don't need to worry about cloning a symbol because it is a primitive,
              // like a number or string.
              var symbol = symbols[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);

              if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                continue;
              }

              child[symbol] = _clone(parent[symbol], depth - 1);

              if (!descriptor.enumerable) {
                Object.defineProperty(child, symbol, {
                  enumerable: false
                });
              }
            }
          }

          if (includeNonEnumerable) {
            var allPropertyNames = Object.getOwnPropertyNames(parent);

            for (var i = 0; i < allPropertyNames.length; i++) {
              var propertyName = allPropertyNames[i];
              var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);

              if (descriptor && descriptor.enumerable) {
                continue;
              }

              child[propertyName] = _clone(parent[propertyName], depth - 1);
              Object.defineProperty(child, propertyName, {
                enumerable: false
              });
            }
          }

          return child;
        }

        return _clone(parent, depth);
      }
      /**
       * Simple flat clone using prototype, accepts only objects, usefull for property
       * override on FLAT configuration object (no nested props).
       *
       * USE WITH CAUTION! This may not behave as you wish if you do not know how this
       * works.
       */


      clone.clonePrototype = function clonePrototype(parent) {
        if (parent === null) return null;

        var c = function () {};

        c.prototype = parent;
        return new c();
      }; // private utility functions


      function __objToStr(o) {
        return Object.prototype.toString.call(o);
      }

      clone.__objToStr = __objToStr;

      function __isDate(o) {
        return typeof o === 'object' && __objToStr(o) === '[object Date]';
      }

      clone.__isDate = __isDate;

      function __isArray(o) {
        return typeof o === 'object' && __objToStr(o) === '[object Array]';
      }

      clone.__isArray = __isArray;

      function __isRegExp(o) {
        return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
      }

      clone.__isRegExp = __isRegExp;

      function __getRegExpFlags(re) {
        var flags = '';
        if (re.global) flags += 'g';
        if (re.ignoreCase) flags += 'i';
        if (re.multiline) flags += 'm';
        return flags;
      }

      clone.__getRegExpFlags = __getRegExpFlags;
      return clone;
    }();

    if (module.exports) {
      module.exports = clone;
    }
  });

  /*
   * node-cache 5.1.2 ( 2020-07-01 )
   * https://github.com/node-cache/node-cache
   *
   * Released under the MIT license
   * https://github.com/node-cache/node-cache/blob/master/LICENSE
   *
   * Maintained by  (  )
  */
  var node_cache = createCommonjsModule(function (module) {
    (function () {
      var EventEmitter,
          clone,
          splice = [].splice,
          boundMethodCheck = function (instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new Error('Bound instance method accessed before binding');
        }
      },
          indexOf = [].indexOf;

      clone = clone_1;
      EventEmitter = require$$1__default['default'].EventEmitter; // generate superclass

      module.exports = function () {
        class NodeCache extends EventEmitter {
          constructor(options = {}) {
            super(); // ## get
            // get a cached key and change the stats
            // **Parameters:**
            // * `key` ( String | Number ): cache key
            // **Example:**
            //	myCache.get "myKey", ( err, val )

            this.get = this.get.bind(this); // ## mget
            // get multiple cached keys at once and change the stats
            // **Parameters:**
            // * `keys` ( String|Number[] ): an array of keys
            // **Example:**
            //	myCache.mget [ "foo", "bar" ]

            this.mget = this.mget.bind(this); // ## set
            // set a cached key and change the stats
            // **Parameters:**
            // * `key` ( String | Number ): cache key
            // * `value` ( Any ): A element to cache. If the option `option.forceString` is `true` the module trys to translate it to a serialized JSON
            // * `[ ttl ]` ( Number | String ): ( optional ) The time to live in seconds.
            // **Example:**
            //	myCache.set "myKey", "my_String Value"
            //	myCache.set "myKey", "my_String Value", 10

            this.set = this.set.bind(this); // ## mset
            // set multiple keys at once
            // **Parameters:**
            // * `keyValueSet` ( Object[] ): an array of object which includes key,value and ttl
            // **Example:**
            //	myCache.mset(
            //		[
            //			{
            //				key: "myKey",
            //				val: "myValue",
            //				ttl: [ttl in seconds]
            //			}
            //		])

            this.mset = this.mset.bind(this); // ## del
            // remove keys
            // **Parameters:**
            // * `keys` ( String | Number | String|Number[] ): cache key to delete or a array of cache keys
            // **Return**
            // ( Number ): Number of deleted keys
            // **Example:**
            //	myCache.del( "myKey" )

            this.del = this.del.bind(this); // ## take
            // get the cached value and remove the key from the cache.
            // Equivalent to calling `get(key)` + `del(key)`.
            // Useful for implementing `single use` mechanism such as OTP, where once a value is read it will become obsolete.
            // **Parameters:**
            // * `key` ( String | Number ): cache key
            // **Example:**
            //	myCache.take "myKey", ( err, val )

            this.take = this.take.bind(this); // ## ttl
            // reset or redefine the ttl of a key. `ttl` = 0 means infinite lifetime.
            // If `ttl` is not passed the default ttl is used.
            // If `ttl` < 0 the key will be deleted.
            // **Parameters:**
            // * `key` ( String | Number ): cache key to reset the ttl value
            // * `ttl` ( Number ): ( optional -> options.stdTTL || 0 ) The time to live in seconds
            // **Return**
            // ( Boolen ): key found and ttl set
            // **Example:**
            //	myCache.ttl( "myKey" ) // will set ttl to default ttl
            //	myCache.ttl( "myKey", 1000 )

            this.ttl = this.ttl.bind(this); // ## getTtl
            // receive the ttl of a key.
            // **Parameters:**
            // * `key` ( String | Number ): cache key to check the ttl value
            // **Return**
            // ( Number|undefined ): The timestamp in ms when the key will expire, 0 if it will never expire or undefined if it not exists
            // **Example:**
            //	myCache.getTtl( "myKey" )

            this.getTtl = this.getTtl.bind(this); // ## keys
            // list all keys within this cache
            // **Return**
            // ( Array ): An array of all keys
            // **Example:**
            //     _keys = myCache.keys()
            //     # [ "foo", "bar", "fizz", "buzz", "anotherKeys" ]

            this.keys = this.keys.bind(this); // ## has
            // Check if a key is cached
            // **Parameters:**
            // * `key` ( String | Number ): cache key to check the ttl value
            // **Return**
            // ( Boolean ): A boolean that indicates if the key is cached
            // **Example:**
            //     _exists = myCache.has('myKey')
            //     # true

            this.has = this.has.bind(this); // ## getStats
            // get the stats
            // **Parameters:**
            // -
            // **Return**
            // ( Object ): Stats data
            // **Example:**
            //     myCache.getStats()
            //     # {
            //     # hits: 0,
            //     # misses: 0,
            //     # keys: 0,
            //     # ksize: 0,
            //     # vsize: 0
            //     # }

            this.getStats = this.getStats.bind(this); // ## flushAll
            // flush the whole data and reset the stats
            // **Example:**
            //     myCache.flushAll()
            //     myCache.getStats()
            //     # {
            //     # hits: 0,
            //     # misses: 0,
            //     # keys: 0,
            //     # ksize: 0,
            //     # vsize: 0
            //     # }

            this.flushAll = this.flushAll.bind(this); // ## flushStats
            // flush the stats and reset all counters to 0
            // **Example:**
            //     myCache.flushStats()
            //     myCache.getStats()
            //     # {
            //     # hits: 0,
            //     # misses: 0,
            //     # keys: 0,
            //     # ksize: 0,
            //     # vsize: 0
            //     # }

            this.flushStats = this.flushStats.bind(this); // ## close
            // This will clear the interval timeout which is set on checkperiod option.
            // **Example:**
            //     myCache.close()

            this.close = this.close.bind(this); // ## _checkData
            // internal housekeeping method.
            // Check all the cached data and delete the invalid values

            this._checkData = this._checkData.bind(this); // ## _check
            // internal method the check the value. If it's not valid any more delete it

            this._check = this._check.bind(this); // ## _isInvalidKey
            // internal method to check if the type of a key is either `number` or `string`

            this._isInvalidKey = this._isInvalidKey.bind(this); // ## _wrap
            // internal method to wrap a value in an object with some metadata

            this._wrap = this._wrap.bind(this); // ## _getValLength
            // internal method to calculate the value length

            this._getValLength = this._getValLength.bind(this); // ## _error
            // internal method to handle an error message

            this._error = this._error.bind(this); // ## _initErrors
            // internal method to generate error message templates

            this._initErrors = this._initErrors.bind(this);
            this.options = options;

            this._initErrors(); // container for cached data


            this.data = {}; // module options

            this.options = Object.assign({
              // convert all elements to string
              forceString: false,
              // used standard size for calculating value size
              objectValueSize: 80,
              promiseValueSize: 80,
              arrayValueSize: 40,
              // standard time to live in seconds. 0 = infinity;
              stdTTL: 0,
              // time in seconds to check all data and delete expired keys
              checkperiod: 600,
              // en/disable cloning of variables. If `true` you'll get a copy of the cached variable. If `false` you'll save and get just the reference
              useClones: true,
              // whether values should be deleted automatically at expiration
              deleteOnExpire: true,
              // enable legacy callbacks
              enableLegacyCallbacks: false,
              // max amount of keys that are being stored
              maxKeys: -1
            }, this.options); // generate functions with callbacks (legacy)

            if (this.options.enableLegacyCallbacks) {
              console.warn("WARNING! node-cache legacy callback support will drop in v6.x");
              ["get", "mget", "set", "del", "ttl", "getTtl", "keys", "has"].forEach(methodKey => {
                var oldMethod; // reference real function

                oldMethod = this[methodKey];

                this[methodKey] = function (...args) {
                  var cb, err, ref, res;
                  ref = args, [...args] = ref, [cb] = splice.call(args, -1); // return a callback if cb is defined and a function

                  if (typeof cb === "function") {
                    try {
                      res = oldMethod(...args);
                      cb(null, res);
                    } catch (error1) {
                      err = error1;
                      cb(err);
                    }
                  } else {
                    return oldMethod(...args, cb);
                  }
                };
              });
            } // statistics container


            this.stats = {
              hits: 0,
              misses: 0,
              keys: 0,
              ksize: 0,
              vsize: 0
            }; // pre allocate valid keytypes array

            this.validKeyTypes = ["string", "number"]; // initalize checking period

            this._checkData();

            return;
          }

          get(key) {
            var _ret, err;

            boundMethodCheck(this, NodeCache); // handle invalid key types

            if ((err = this._isInvalidKey(key)) != null) {
              throw err;
            } // get data and incremet stats


            if (this.data[key] != null && this._check(key, this.data[key])) {
              this.stats.hits++;
              _ret = this._unwrap(this.data[key]); // return data

              return _ret;
            } else {
              // if not found return undefined
              this.stats.misses++;
              return void 0;
            }
          }

          mget(keys) {
            var _err, err, i, key, len, oRet;

            boundMethodCheck(this, NodeCache); // convert a string to an array of one key

            if (!Array.isArray(keys)) {
              _err = this._error("EKEYSTYPE");
              throw _err;
            } // define return


            oRet = {};

            for (i = 0, len = keys.length; i < len; i++) {
              key = keys[i]; // handle invalid key types

              if ((err = this._isInvalidKey(key)) != null) {
                throw err;
              } // get data and increment stats


              if (this.data[key] != null && this._check(key, this.data[key])) {
                this.stats.hits++;
                oRet[key] = this._unwrap(this.data[key]);
              } else {
                // if not found return a error
                this.stats.misses++;
              }
            } // return all found keys


            return oRet;
          }

          set(key, value, ttl) {
            var _err, err, existent;

            boundMethodCheck(this, NodeCache); // check if cache is overflowing

            if (this.options.maxKeys > -1 && this.stats.keys >= this.options.maxKeys) {
              _err = this._error("ECACHEFULL");
              throw _err;
            } // force the data to string


            if (this.options.forceString && !typeof value === "string") {
              value = JSON.stringify(value);
            } // set default ttl if not passed


            if (ttl == null) {
              ttl = this.options.stdTTL;
            } // handle invalid key types


            if ((err = this._isInvalidKey(key)) != null) {
              throw err;
            } // internal helper variables


            existent = false; // remove existing data from stats

            if (this.data[key]) {
              existent = true;
              this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));
            } // set the value


            this.data[key] = this._wrap(value, ttl);
            this.stats.vsize += this._getValLength(value); // only add the keys and key-size if the key is new

            if (!existent) {
              this.stats.ksize += this._getKeyLength(key);
              this.stats.keys++;
            }

            this.emit("set", key, value); // return true

            return true;
          }

          mset(keyValueSet) {
            var _err, err, i, j, key, keyValuePair, len, len1, ttl, val;

            boundMethodCheck(this, NodeCache); // check if cache is overflowing

            if (this.options.maxKeys > -1 && this.stats.keys + keyValueSet.length >= this.options.maxKeys) {
              _err = this._error("ECACHEFULL");
              throw _err;
            } // loop over keyValueSet to validate key and ttl


            for (i = 0, len = keyValueSet.length; i < len; i++) {
              keyValuePair = keyValueSet[i];
              ({
                key,
                val,
                ttl
              } = keyValuePair); // check if there is ttl and it's a number

              if (ttl && typeof ttl !== "number") {
                _err = this._error("ETTLTYPE");
                throw _err;
              } // handle invalid key types


              if ((err = this._isInvalidKey(key)) != null) {
                throw err;
              }
            }

            for (j = 0, len1 = keyValueSet.length; j < len1; j++) {
              keyValuePair = keyValueSet[j];
              ({
                key,
                val,
                ttl
              } = keyValuePair);
              this.set(key, val, ttl);
            }

            return true;
          }

          del(keys) {
            var delCount, err, i, key, len, oldVal;
            boundMethodCheck(this, NodeCache); // convert keys to an array of itself

            if (!Array.isArray(keys)) {
              keys = [keys];
            }

            delCount = 0;

            for (i = 0, len = keys.length; i < len; i++) {
              key = keys[i]; // handle invalid key types

              if ((err = this._isInvalidKey(key)) != null) {
                throw err;
              } // only delete if existent


              if (this.data[key] != null) {
                // calc the stats
                this.stats.vsize -= this._getValLength(this._unwrap(this.data[key], false));
                this.stats.ksize -= this._getKeyLength(key);
                this.stats.keys--;
                delCount++; // delete the value

                oldVal = this.data[key];
                delete this.data[key]; // return true

                this.emit("del", key, oldVal.v);
              }
            }

            return delCount;
          }

          take(key) {
            var _ret;

            boundMethodCheck(this, NodeCache);
            _ret = this.get(key);

            if (_ret != null) {
              this.del(key);
            }

            return _ret;
          }

          ttl(key, ttl) {
            var err;
            boundMethodCheck(this, NodeCache);
            ttl || (ttl = this.options.stdTTL);

            if (!key) {
              return false;
            } // handle invalid key types


            if ((err = this._isInvalidKey(key)) != null) {
              throw err;
            } // check for existent data and update the ttl value


            if (this.data[key] != null && this._check(key, this.data[key])) {
              // if ttl < 0 delete the key. otherwise reset the value
              if (ttl >= 0) {
                this.data[key] = this._wrap(this.data[key].v, ttl, false);
              } else {
                this.del(key);
              }

              return true;
            } else {
              // return false if key has not been found
              return false;
            }
          }

          getTtl(key) {
            var _ttl, err;

            boundMethodCheck(this, NodeCache);

            if (!key) {
              return void 0;
            } // handle invalid key types


            if ((err = this._isInvalidKey(key)) != null) {
              throw err;
            } // check for existant data and update the ttl value


            if (this.data[key] != null && this._check(key, this.data[key])) {
              _ttl = this.data[key].t;
              return _ttl;
            } else {
              // return undefined if key has not been found
              return void 0;
            }
          }

          keys() {
            var _keys;

            boundMethodCheck(this, NodeCache);
            _keys = Object.keys(this.data);
            return _keys;
          }

          has(key) {
            var _exists;

            boundMethodCheck(this, NodeCache);
            _exists = this.data[key] != null && this._check(key, this.data[key]);
            return _exists;
          }

          getStats() {
            boundMethodCheck(this, NodeCache);
            return this.stats;
          }

          flushAll(_startPeriod = true) {
            boundMethodCheck(this, NodeCache); // parameter just for testing
            // set data empty

            this.data = {}; // reset stats

            this.stats = {
              hits: 0,
              misses: 0,
              keys: 0,
              ksize: 0,
              vsize: 0
            }; // reset check period

            this._killCheckPeriod();

            this._checkData(_startPeriod);

            this.emit("flush");
          }

          flushStats() {
            boundMethodCheck(this, NodeCache); // reset stats

            this.stats = {
              hits: 0,
              misses: 0,
              keys: 0,
              ksize: 0,
              vsize: 0
            };
            this.emit("flush_stats");
          }

          close() {
            boundMethodCheck(this, NodeCache);

            this._killCheckPeriod();
          }

          _checkData(startPeriod = true) {
            var key, ref, value;
            boundMethodCheck(this, NodeCache);
            ref = this.data; // run the housekeeping method

            for (key in ref) {
              value = ref[key];

              this._check(key, value);
            }

            if (startPeriod && this.options.checkperiod > 0) {
              this.checkTimeout = setTimeout(this._checkData, this.options.checkperiod * 1000, startPeriod);

              if (this.checkTimeout != null && this.checkTimeout.unref != null) {
                this.checkTimeout.unref();
              }
            }
          } // ## _killCheckPeriod
          // stop the checkdata period. Only needed to abort the script in testing mode.


          _killCheckPeriod() {
            if (this.checkTimeout != null) {
              return clearTimeout(this.checkTimeout);
            }
          }

          _check(key, data) {
            var _retval;

            boundMethodCheck(this, NodeCache);
            _retval = true; // data is invalid if the ttl is too old and is not 0
            // console.log data.t < Date.now(), data.t, Date.now()

            if (data.t !== 0 && data.t < Date.now()) {
              if (this.options.deleteOnExpire) {
                _retval = false;
                this.del(key);
              }

              this.emit("expired", key, this._unwrap(data));
            }

            return _retval;
          }

          _isInvalidKey(key) {
            var ref;
            boundMethodCheck(this, NodeCache);

            if (ref = typeof key, indexOf.call(this.validKeyTypes, ref) < 0) {
              return this._error("EKEYTYPE", {
                type: typeof key
              });
            }
          }

          _wrap(value, ttl, asClone = true) {
            var livetime, now, ttlMultiplicator;
            boundMethodCheck(this, NodeCache);

            if (!this.options.useClones) {
              asClone = false;
            } // define the time to live


            now = Date.now();
            livetime = 0;
            ttlMultiplicator = 1000; // use given ttl

            if (ttl === 0) {
              livetime = 0;
            } else if (ttl) {
              livetime = now + ttl * ttlMultiplicator;
            } else {
              // use standard ttl
              if (this.options.stdTTL === 0) {
                livetime = this.options.stdTTL;
              } else {
                livetime = now + this.options.stdTTL * ttlMultiplicator;
              }
            } // return the wrapped value


            return {
              t: livetime,
              v: asClone ? clone(value) : value
            };
          } // ## _unwrap
          // internal method to extract get the value out of the wrapped value


          _unwrap(value, asClone = true) {
            if (!this.options.useClones) {
              asClone = false;
            }

            if (value.v != null) {
              if (asClone) {
                return clone(value.v);
              } else {
                return value.v;
              }
            }

            return null;
          } // ## _getKeyLength
          // internal method the calculate the key length


          _getKeyLength(key) {
            return key.toString().length;
          }

          _getValLength(value) {
            boundMethodCheck(this, NodeCache);

            if (typeof value === "string") {
              // if the value is a String get the real length
              return value.length;
            } else if (this.options.forceString) {
              // force string if it's defined and not passed
              return JSON.stringify(value).length;
            } else if (Array.isArray(value)) {
              // if the data is an Array multiply each element with a defined default length
              return this.options.arrayValueSize * value.length;
            } else if (typeof value === "number") {
              return 8;
            } else if (typeof (value != null ? value.then : void 0) === "function") {
              // if the data is a Promise, use defined default
              // (can't calculate actual/resolved value size synchronously)
              return this.options.promiseValueSize;
            } else if (typeof Buffer !== "undefined" && Buffer !== null ? Buffer.isBuffer(value) : void 0) {
              return value.length;
            } else if (value != null && typeof value === "object") {
              // if the data is an Object multiply each element with a defined default length
              return this.options.objectValueSize * Object.keys(value).length;
            } else if (typeof value === "boolean") {
              return 8;
            } else {
              // default fallback
              return 0;
            }
          }

          _error(type, data = {}) {
            var error;
            boundMethodCheck(this, NodeCache); // generate the error object

            error = new Error();
            error.name = type;
            error.errorcode = type;
            error.message = this.ERRORS[type] != null ? this.ERRORS[type](data) : "-";
            error.data = data; // return the error object

            return error;
          }

          _initErrors() {
            var _errMsg, _errT, ref;

            boundMethodCheck(this, NodeCache);
            this.ERRORS = {};
            ref = this._ERRORS;

            for (_errT in ref) {
              _errMsg = ref[_errT];
              this.ERRORS[_errT] = this.createErrorMessage(_errMsg);
            }
          }

          createErrorMessage(errMsg) {
            return function (args) {
              return errMsg.replace("__key", args.type);
            };
          }

        }
        NodeCache.prototype._ERRORS = {
          "ENOTFOUND": "Key `__key` not found",
          "ECACHEFULL": "Cache max keys amount exceeded",
          "EKEYTYPE": "The key argument has to be of type `string` or `number`. Found: `__key`",
          "EKEYSTYPE": "The keys argument has to be an array.",
          "ETTLTYPE": "The ttl argument has to be a number."
        };
        return NodeCache;
      }.call(this);
    }).call(commonjsGlobal);
  });

  /*
   * node-cache 5.1.2 ( 2020-07-01 )
   * https://github.com/node-cache/node-cache
   *
   * Released under the MIT license
   * https://github.com/node-cache/node-cache/blob/master/LICENSE
   *
   * Maintained by  (  )
  */
  var nodeCache = createCommonjsModule(function (module) {
    (function () {
      var exports;
      exports = module.exports = node_cache;
      exports.version = '5.1.2';
    }).call(commonjsGlobal);
  });

  // Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

  // fix for "Readable" isn't a named export issue
  const Readable = Stream__default['default'].Readable;

  const BUFFER = Symbol('buffer');
  const TYPE = Symbol('type');

  class Blob {
  	constructor() {
  		this[TYPE] = '';

  		const blobParts = arguments[0];
  		const options = arguments[1];

  		const buffers = [];

  		if (blobParts) {
  			const a = blobParts;
  			const length = Number(a.length);
  			for (let i = 0; i < length; i++) {
  				const element = a[i];
  				let buffer;
  				if (element instanceof Buffer) {
  					buffer = element;
  				} else if (ArrayBuffer.isView(element)) {
  					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
  				} else if (element instanceof ArrayBuffer) {
  					buffer = Buffer.from(element);
  				} else if (element instanceof Blob) {
  					buffer = element[BUFFER];
  				} else {
  					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
  				}
  				buffers.push(buffer);
  			}
  		}

  		this[BUFFER] = Buffer.concat(buffers);

  		let type = options && options.type !== undefined && String(options.type).toLowerCase();
  		if (type && !/[^\u0020-\u007E]/.test(type)) {
  			this[TYPE] = type;
  		}
  	}
  	get size() {
  		return this[BUFFER].length;
  	}
  	get type() {
  		return this[TYPE];
  	}
  	text() {
  		return Promise.resolve(this[BUFFER].toString());
  	}
  	arrayBuffer() {
  		const buf = this[BUFFER];
  		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  		return Promise.resolve(ab);
  	}
  	stream() {
  		const readable = new Readable();
  		readable._read = function () {};
  		readable.push(this[BUFFER]);
  		readable.push(null);
  		return readable;
  	}
  	toString() {
  		return '[object Blob]';
  	}
  	slice() {
  		const size = this.size;

  		const start = arguments[0];
  		const end = arguments[1];
  		let relativeStart, relativeEnd;
  		if (start === undefined) {
  			relativeStart = 0;
  		} else if (start < 0) {
  			relativeStart = Math.max(size + start, 0);
  		} else {
  			relativeStart = Math.min(start, size);
  		}
  		if (end === undefined) {
  			relativeEnd = size;
  		} else if (end < 0) {
  			relativeEnd = Math.max(size + end, 0);
  		} else {
  			relativeEnd = Math.min(end, size);
  		}
  		const span = Math.max(relativeEnd - relativeStart, 0);

  		const buffer = this[BUFFER];
  		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
  		const blob = new Blob([], { type: arguments[2] });
  		blob[BUFFER] = slicedBuffer;
  		return blob;
  	}
  }

  Object.defineProperties(Blob.prototype, {
  	size: { enumerable: true },
  	type: { enumerable: true },
  	slice: { enumerable: true }
  });

  Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
  	value: 'Blob',
  	writable: false,
  	enumerable: false,
  	configurable: true
  });

  /**
   * fetch-error.js
   *
   * FetchError interface for operational errors
   */

  /**
   * Create FetchError instance
   *
   * @param   String      message      Error message for human
   * @param   String      type         Error type for machine
   * @param   String      systemError  For Node.js system error
   * @return  FetchError
   */
  function FetchError(message, type, systemError) {
    Error.call(this, message);

    this.message = message;
    this.type = type;

    // when err.type is `system`, err.code contains system error code
    if (systemError) {
      this.code = this.errno = systemError.code;
    }

    // hide custom error implementation details from end-users
    Error.captureStackTrace(this, this.constructor);
  }

  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = 'FetchError';

  let convert;
  try {
  	convert = require('encoding').convert;
  } catch (e) {}

  const INTERNALS = Symbol('Body internals');

  // fix an issue where "PassThrough" isn't a named export for node <10
  const PassThrough = Stream__default['default'].PassThrough;

  /**
   * Body mixin
   *
   * Ref: https://fetch.spec.whatwg.org/#body
   *
   * @param   Stream  body  Readable stream
   * @param   Object  opts  Response options
   * @return  Void
   */
  function Body(body) {
  	var _this = this;

  	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
  	    _ref$size = _ref.size;

  	let size = _ref$size === undefined ? 0 : _ref$size;
  	var _ref$timeout = _ref.timeout;
  	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

  	if (body == null) {
  		// body is undefined or null
  		body = null;
  	} else if (isURLSearchParams(body)) {
  		// body is a URLSearchParams
  		body = Buffer.from(body.toString());
  	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
  		// body is ArrayBuffer
  		body = Buffer.from(body);
  	} else if (ArrayBuffer.isView(body)) {
  		// body is ArrayBufferView
  		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  	} else if (body instanceof Stream__default['default']) ; else {
  		// none of the above
  		// coerce to string then buffer
  		body = Buffer.from(String(body));
  	}
  	this[INTERNALS] = {
  		body,
  		disturbed: false,
  		error: null
  	};
  	this.size = size;
  	this.timeout = timeout;

  	if (body instanceof Stream__default['default']) {
  		body.on('error', function (err) {
  			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
  			_this[INTERNALS].error = error;
  		});
  	}
  }

  Body.prototype = {
  	get body() {
  		return this[INTERNALS].body;
  	},

  	get bodyUsed() {
  		return this[INTERNALS].disturbed;
  	},

  	/**
    * Decode response as ArrayBuffer
    *
    * @return  Promise
    */
  	arrayBuffer() {
  		return consumeBody.call(this).then(function (buf) {
  			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  		});
  	},

  	/**
    * Return raw response as Blob
    *
    * @return Promise
    */
  	blob() {
  		let ct = this.headers && this.headers.get('content-type') || '';
  		return consumeBody.call(this).then(function (buf) {
  			return Object.assign(
  			// Prevent copying
  			new Blob([], {
  				type: ct.toLowerCase()
  			}), {
  				[BUFFER]: buf
  			});
  		});
  	},

  	/**
    * Decode response as json
    *
    * @return  Promise
    */
  	json() {
  		var _this2 = this;

  		return consumeBody.call(this).then(function (buffer) {
  			try {
  				return JSON.parse(buffer.toString());
  			} catch (err) {
  				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
  			}
  		});
  	},

  	/**
    * Decode response as text
    *
    * @return  Promise
    */
  	text() {
  		return consumeBody.call(this).then(function (buffer) {
  			return buffer.toString();
  		});
  	},

  	/**
    * Decode response as buffer (non-spec api)
    *
    * @return  Promise
    */
  	buffer() {
  		return consumeBody.call(this);
  	},

  	/**
    * Decode response as text, while automatically detecting the encoding and
    * trying to decode to UTF-8 (non-spec api)
    *
    * @return  Promise
    */
  	textConverted() {
  		var _this3 = this;

  		return consumeBody.call(this).then(function (buffer) {
  			return convertBody(buffer, _this3.headers);
  		});
  	}
  };

  // In browsers, all properties are enumerable.
  Object.defineProperties(Body.prototype, {
  	body: { enumerable: true },
  	bodyUsed: { enumerable: true },
  	arrayBuffer: { enumerable: true },
  	blob: { enumerable: true },
  	json: { enumerable: true },
  	text: { enumerable: true }
  });

  Body.mixIn = function (proto) {
  	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
  		// istanbul ignore else: future proof
  		if (!(name in proto)) {
  			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
  			Object.defineProperty(proto, name, desc);
  		}
  	}
  };

  /**
   * Consume and convert an entire Body to a Buffer.
   *
   * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
   *
   * @return  Promise
   */
  function consumeBody() {
  	var _this4 = this;

  	if (this[INTERNALS].disturbed) {
  		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  	}

  	this[INTERNALS].disturbed = true;

  	if (this[INTERNALS].error) {
  		return Body.Promise.reject(this[INTERNALS].error);
  	}

  	let body = this.body;

  	// body is null
  	if (body === null) {
  		return Body.Promise.resolve(Buffer.alloc(0));
  	}

  	// body is blob
  	if (isBlob(body)) {
  		body = body.stream();
  	}

  	// body is buffer
  	if (Buffer.isBuffer(body)) {
  		return Body.Promise.resolve(body);
  	}

  	// istanbul ignore if: should never happen
  	if (!(body instanceof Stream__default['default'])) {
  		return Body.Promise.resolve(Buffer.alloc(0));
  	}

  	// body is stream
  	// get ready to actually consume the body
  	let accum = [];
  	let accumBytes = 0;
  	let abort = false;

  	return new Body.Promise(function (resolve, reject) {
  		let resTimeout;

  		// allow timeout on slow response body
  		if (_this4.timeout) {
  			resTimeout = setTimeout(function () {
  				abort = true;
  				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
  			}, _this4.timeout);
  		}

  		// handle stream errors
  		body.on('error', function (err) {
  			if (err.name === 'AbortError') {
  				// if the request was aborted, reject with this Error
  				abort = true;
  				reject(err);
  			} else {
  				// other errors, such as incorrect content-encoding
  				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
  			}
  		});

  		body.on('data', function (chunk) {
  			if (abort || chunk === null) {
  				return;
  			}

  			if (_this4.size && accumBytes + chunk.length > _this4.size) {
  				abort = true;
  				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
  				return;
  			}

  			accumBytes += chunk.length;
  			accum.push(chunk);
  		});

  		body.on('end', function () {
  			if (abort) {
  				return;
  			}

  			clearTimeout(resTimeout);

  			try {
  				resolve(Buffer.concat(accum, accumBytes));
  			} catch (err) {
  				// handle streams that have accumulated too much data (issue #414)
  				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
  			}
  		});
  	});
  }

  /**
   * Detect buffer encoding and convert to target encoding
   * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
   *
   * @param   Buffer  buffer    Incoming buffer
   * @param   String  encoding  Target encoding
   * @return  String
   */
  function convertBody(buffer, headers) {
  	if (typeof convert !== 'function') {
  		throw new Error('The package `encoding` must be installed to use the textConverted() function');
  	}

  	const ct = headers.get('content-type');
  	let charset = 'utf-8';
  	let res, str;

  	// header
  	if (ct) {
  		res = /charset=([^;]*)/i.exec(ct);
  	}

  	// no charset in content type, peek at response body for at most 1024 bytes
  	str = buffer.slice(0, 1024).toString();

  	// html5
  	if (!res && str) {
  		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
  	}

  	// html4
  	if (!res && str) {
  		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
  		if (!res) {
  			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
  			if (res) {
  				res.pop(); // drop last quote
  			}
  		}

  		if (res) {
  			res = /charset=(.*)/i.exec(res.pop());
  		}
  	}

  	// xml
  	if (!res && str) {
  		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
  	}

  	// found charset
  	if (res) {
  		charset = res.pop();

  		// prevent decode issues when sites use incorrect encoding
  		// ref: https://hsivonen.fi/encoding-menu/
  		if (charset === 'gb2312' || charset === 'gbk') {
  			charset = 'gb18030';
  		}
  	}

  	// turn raw buffers into a single utf-8 buffer
  	return convert(buffer, 'UTF-8', charset).toString();
  }

  /**
   * Detect a URLSearchParams object
   * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
   *
   * @param   Object  obj     Object to detect by type or brand
   * @return  String
   */
  function isURLSearchParams(obj) {
  	// Duck-typing as a necessary condition.
  	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
  		return false;
  	}

  	// Brand-checking and more duck-typing as optional condition.
  	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
  }

  /**
   * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
   * @param  {*} obj
   * @return {boolean}
   */
  function isBlob(obj) {
  	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }

  /**
   * Clone body given Res/Req instance
   *
   * @param   Mixed  instance  Response or Request instance
   * @return  Mixed
   */
  function clone(instance) {
  	let p1, p2;
  	let body = instance.body;

  	// don't allow cloning a used body
  	if (instance.bodyUsed) {
  		throw new Error('cannot clone body after it is used');
  	}

  	// check that body is a stream and not form-data object
  	// note: we can't clone the form-data object without having it as a dependency
  	if (body instanceof Stream__default['default'] && typeof body.getBoundary !== 'function') {
  		// tee instance body
  		p1 = new PassThrough();
  		p2 = new PassThrough();
  		body.pipe(p1);
  		body.pipe(p2);
  		// set instance body to teed body and return the other teed body
  		instance[INTERNALS].body = p1;
  		body = p2;
  	}

  	return body;
  }

  /**
   * Performs the operation "extract a `Content-Type` value from |object|" as
   * specified in the specification:
   * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
   *
   * This function assumes that instance.body is present.
   *
   * @param   Mixed  instance  Any options.body input
   */
  function extractContentType(body) {
  	if (body === null) {
  		// body is null
  		return null;
  	} else if (typeof body === 'string') {
  		// body is string
  		return 'text/plain;charset=UTF-8';
  	} else if (isURLSearchParams(body)) {
  		// body is a URLSearchParams
  		return 'application/x-www-form-urlencoded;charset=UTF-8';
  	} else if (isBlob(body)) {
  		// body is blob
  		return body.type || null;
  	} else if (Buffer.isBuffer(body)) {
  		// body is buffer
  		return null;
  	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
  		// body is ArrayBuffer
  		return null;
  	} else if (ArrayBuffer.isView(body)) {
  		// body is ArrayBufferView
  		return null;
  	} else if (typeof body.getBoundary === 'function') {
  		// detect form data input from form-data module
  		return `multipart/form-data;boundary=${body.getBoundary()}`;
  	} else if (body instanceof Stream__default['default']) {
  		// body is stream
  		// can't really do much about this
  		return null;
  	} else {
  		// Body constructor defaults other things to string
  		return 'text/plain;charset=UTF-8';
  	}
  }

  /**
   * The Fetch Standard treats this as if "total bytes" is a property on the body.
   * For us, we have to explicitly get it with a function.
   *
   * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
   *
   * @param   Body    instance   Instance of Body
   * @return  Number?            Number of bytes, or null if not possible
   */
  function getTotalBytes(instance) {
  	const body = instance.body;


  	if (body === null) {
  		// body is null
  		return 0;
  	} else if (isBlob(body)) {
  		return body.size;
  	} else if (Buffer.isBuffer(body)) {
  		// body is buffer
  		return body.length;
  	} else if (body && typeof body.getLengthSync === 'function') {
  		// detect form data input from form-data module
  		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
  		body.hasKnownLength && body.hasKnownLength()) {
  			// 2.x
  			return body.getLengthSync();
  		}
  		return null;
  	} else {
  		// body is stream
  		return null;
  	}
  }

  /**
   * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
   *
   * @param   Body    instance   Instance of Body
   * @return  Void
   */
  function writeToStream(dest, instance) {
  	const body = instance.body;


  	if (body === null) {
  		// body is null
  		dest.end();
  	} else if (isBlob(body)) {
  		body.stream().pipe(dest);
  	} else if (Buffer.isBuffer(body)) {
  		// body is buffer
  		dest.write(body);
  		dest.end();
  	} else {
  		// body is stream
  		body.pipe(dest);
  	}
  }

  // expose Promise
  Body.Promise = global.Promise;

  /**
   * headers.js
   *
   * Headers class offers convenient helpers
   */

  const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

  function validateName(name) {
  	name = `${name}`;
  	if (invalidTokenRegex.test(name) || name === '') {
  		throw new TypeError(`${name} is not a legal HTTP header name`);
  	}
  }

  function validateValue(value) {
  	value = `${value}`;
  	if (invalidHeaderCharRegex.test(value)) {
  		throw new TypeError(`${value} is not a legal HTTP header value`);
  	}
  }

  /**
   * Find the key in the map object given a header name.
   *
   * Returns undefined if not found.
   *
   * @param   String  name  Header name
   * @return  String|Undefined
   */
  function find(map, name) {
  	name = name.toLowerCase();
  	for (const key in map) {
  		if (key.toLowerCase() === name) {
  			return key;
  		}
  	}
  	return undefined;
  }

  const MAP = Symbol('map');
  class Headers {
  	/**
    * Headers class
    *
    * @param   Object  headers  Response headers
    * @return  Void
    */
  	constructor() {
  		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

  		this[MAP] = Object.create(null);

  		if (init instanceof Headers) {
  			const rawHeaders = init.raw();
  			const headerNames = Object.keys(rawHeaders);

  			for (const headerName of headerNames) {
  				for (const value of rawHeaders[headerName]) {
  					this.append(headerName, value);
  				}
  			}

  			return;
  		}

  		// We don't worry about converting prop to ByteString here as append()
  		// will handle it.
  		if (init == null) ; else if (typeof init === 'object') {
  			const method = init[Symbol.iterator];
  			if (method != null) {
  				if (typeof method !== 'function') {
  					throw new TypeError('Header pairs must be iterable');
  				}

  				// sequence<sequence<ByteString>>
  				// Note: per spec we have to first exhaust the lists then process them
  				const pairs = [];
  				for (const pair of init) {
  					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
  						throw new TypeError('Each header pair must be iterable');
  					}
  					pairs.push(Array.from(pair));
  				}

  				for (const pair of pairs) {
  					if (pair.length !== 2) {
  						throw new TypeError('Each header pair must be a name/value tuple');
  					}
  					this.append(pair[0], pair[1]);
  				}
  			} else {
  				// record<ByteString, ByteString>
  				for (const key of Object.keys(init)) {
  					const value = init[key];
  					this.append(key, value);
  				}
  			}
  		} else {
  			throw new TypeError('Provided initializer must be an object');
  		}
  	}

  	/**
    * Return combined header value given name
    *
    * @param   String  name  Header name
    * @return  Mixed
    */
  	get(name) {
  		name = `${name}`;
  		validateName(name);
  		const key = find(this[MAP], name);
  		if (key === undefined) {
  			return null;
  		}

  		return this[MAP][key].join(', ');
  	}

  	/**
    * Iterate over all headers
    *
    * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
    * @param   Boolean   thisArg   `this` context for callback function
    * @return  Void
    */
  	forEach(callback) {
  		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  		let pairs = getHeaders(this);
  		let i = 0;
  		while (i < pairs.length) {
  			var _pairs$i = pairs[i];
  			const name = _pairs$i[0],
  			      value = _pairs$i[1];

  			callback.call(thisArg, value, name, this);
  			pairs = getHeaders(this);
  			i++;
  		}
  	}

  	/**
    * Overwrite header values given name
    *
    * @param   String  name   Header name
    * @param   String  value  Header value
    * @return  Void
    */
  	set(name, value) {
  		name = `${name}`;
  		value = `${value}`;
  		validateName(name);
  		validateValue(value);
  		const key = find(this[MAP], name);
  		this[MAP][key !== undefined ? key : name] = [value];
  	}

  	/**
    * Append a value onto existing header
    *
    * @param   String  name   Header name
    * @param   String  value  Header value
    * @return  Void
    */
  	append(name, value) {
  		name = `${name}`;
  		value = `${value}`;
  		validateName(name);
  		validateValue(value);
  		const key = find(this[MAP], name);
  		if (key !== undefined) {
  			this[MAP][key].push(value);
  		} else {
  			this[MAP][name] = [value];
  		}
  	}

  	/**
    * Check for header name existence
    *
    * @param   String   name  Header name
    * @return  Boolean
    */
  	has(name) {
  		name = `${name}`;
  		validateName(name);
  		return find(this[MAP], name) !== undefined;
  	}

  	/**
    * Delete all header values given name
    *
    * @param   String  name  Header name
    * @return  Void
    */
  	delete(name) {
  		name = `${name}`;
  		validateName(name);
  		const key = find(this[MAP], name);
  		if (key !== undefined) {
  			delete this[MAP][key];
  		}
  	}

  	/**
    * Return raw headers (non-spec api)
    *
    * @return  Object
    */
  	raw() {
  		return this[MAP];
  	}

  	/**
    * Get an iterator on keys.
    *
    * @return  Iterator
    */
  	keys() {
  		return createHeadersIterator(this, 'key');
  	}

  	/**
    * Get an iterator on values.
    *
    * @return  Iterator
    */
  	values() {
  		return createHeadersIterator(this, 'value');
  	}

  	/**
    * Get an iterator on entries.
    *
    * This is the default iterator of the Headers object.
    *
    * @return  Iterator
    */
  	[Symbol.iterator]() {
  		return createHeadersIterator(this, 'key+value');
  	}
  }
  Headers.prototype.entries = Headers.prototype[Symbol.iterator];

  Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
  	value: 'Headers',
  	writable: false,
  	enumerable: false,
  	configurable: true
  });

  Object.defineProperties(Headers.prototype, {
  	get: { enumerable: true },
  	forEach: { enumerable: true },
  	set: { enumerable: true },
  	append: { enumerable: true },
  	has: { enumerable: true },
  	delete: { enumerable: true },
  	keys: { enumerable: true },
  	values: { enumerable: true },
  	entries: { enumerable: true }
  });

  function getHeaders(headers) {
  	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

  	const keys = Object.keys(headers[MAP]).sort();
  	return keys.map(kind === 'key' ? function (k) {
  		return k.toLowerCase();
  	} : kind === 'value' ? function (k) {
  		return headers[MAP][k].join(', ');
  	} : function (k) {
  		return [k.toLowerCase(), headers[MAP][k].join(', ')];
  	});
  }

  const INTERNAL = Symbol('internal');

  function createHeadersIterator(target, kind) {
  	const iterator = Object.create(HeadersIteratorPrototype);
  	iterator[INTERNAL] = {
  		target,
  		kind,
  		index: 0
  	};
  	return iterator;
  }

  const HeadersIteratorPrototype = Object.setPrototypeOf({
  	next() {
  		// istanbul ignore if
  		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
  			throw new TypeError('Value of `this` is not a HeadersIterator');
  		}

  		var _INTERNAL = this[INTERNAL];
  		const target = _INTERNAL.target,
  		      kind = _INTERNAL.kind,
  		      index = _INTERNAL.index;

  		const values = getHeaders(target, kind);
  		const len = values.length;
  		if (index >= len) {
  			return {
  				value: undefined,
  				done: true
  			};
  		}

  		this[INTERNAL].index = index + 1;

  		return {
  			value: values[index],
  			done: false
  		};
  	}
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
  	value: 'HeadersIterator',
  	writable: false,
  	enumerable: false,
  	configurable: true
  });

  /**
   * Export the Headers object in a form that Node.js can consume.
   *
   * @param   Headers  headers
   * @return  Object
   */
  function exportNodeCompatibleHeaders(headers) {
  	const obj = Object.assign({ __proto__: null }, headers[MAP]);

  	// http.request() only supports string as Host header. This hack makes
  	// specifying custom Host header possible.
  	const hostHeaderKey = find(headers[MAP], 'Host');
  	if (hostHeaderKey !== undefined) {
  		obj[hostHeaderKey] = obj[hostHeaderKey][0];
  	}

  	return obj;
  }

  /**
   * Create a Headers object from an object of headers, ignoring those that do
   * not conform to HTTP grammar productions.
   *
   * @param   Object  obj  Object of headers
   * @return  Headers
   */
  function createHeadersLenient(obj) {
  	const headers = new Headers();
  	for (const name of Object.keys(obj)) {
  		if (invalidTokenRegex.test(name)) {
  			continue;
  		}
  		if (Array.isArray(obj[name])) {
  			for (const val of obj[name]) {
  				if (invalidHeaderCharRegex.test(val)) {
  					continue;
  				}
  				if (headers[MAP][name] === undefined) {
  					headers[MAP][name] = [val];
  				} else {
  					headers[MAP][name].push(val);
  				}
  			}
  		} else if (!invalidHeaderCharRegex.test(obj[name])) {
  			headers[MAP][name] = [obj[name]];
  		}
  	}
  	return headers;
  }

  const INTERNALS$1 = Symbol('Response internals');

  // fix an issue where "STATUS_CODES" aren't a named export for node <10
  const STATUS_CODES = http__default['default'].STATUS_CODES;

  /**
   * Response class
   *
   * @param   Stream  body  Readable stream
   * @param   Object  opts  Response options
   * @return  Void
   */
  class Response {
  	constructor() {
  		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  		Body.call(this, body, opts);

  		const status = opts.status || 200;
  		const headers = new Headers(opts.headers);

  		if (body != null && !headers.has('Content-Type')) {
  			const contentType = extractContentType(body);
  			if (contentType) {
  				headers.append('Content-Type', contentType);
  			}
  		}

  		this[INTERNALS$1] = {
  			url: opts.url,
  			status,
  			statusText: opts.statusText || STATUS_CODES[status],
  			headers,
  			counter: opts.counter
  		};
  	}

  	get url() {
  		return this[INTERNALS$1].url || '';
  	}

  	get status() {
  		return this[INTERNALS$1].status;
  	}

  	/**
    * Convenience property representing if the request ended normally
    */
  	get ok() {
  		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
  	}

  	get redirected() {
  		return this[INTERNALS$1].counter > 0;
  	}

  	get statusText() {
  		return this[INTERNALS$1].statusText;
  	}

  	get headers() {
  		return this[INTERNALS$1].headers;
  	}

  	/**
    * Clone this response
    *
    * @return  Response
    */
  	clone() {
  		return new Response(clone(this), {
  			url: this.url,
  			status: this.status,
  			statusText: this.statusText,
  			headers: this.headers,
  			ok: this.ok,
  			redirected: this.redirected
  		});
  	}
  }

  Body.mixIn(Response.prototype);

  Object.defineProperties(Response.prototype, {
  	url: { enumerable: true },
  	status: { enumerable: true },
  	ok: { enumerable: true },
  	redirected: { enumerable: true },
  	statusText: { enumerable: true },
  	headers: { enumerable: true },
  	clone: { enumerable: true }
  });

  Object.defineProperty(Response.prototype, Symbol.toStringTag, {
  	value: 'Response',
  	writable: false,
  	enumerable: false,
  	configurable: true
  });

  const INTERNALS$2 = Symbol('Request internals');

  // fix an issue where "format", "parse" aren't a named export for node <10
  const parse_url = Url__default['default'].parse;
  const format_url = Url__default['default'].format;

  const streamDestructionSupported = 'destroy' in Stream__default['default'].Readable.prototype;

  /**
   * Check if a value is an instance of Request.
   *
   * @param   Mixed   input
   * @return  Boolean
   */
  function isRequest(input) {
  	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
  }

  function isAbortSignal(signal) {
  	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
  	return !!(proto && proto.constructor.name === 'AbortSignal');
  }

  /**
   * Request class
   *
   * @param   Mixed   input  Url or Request instance
   * @param   Object  init   Custom options
   * @return  Void
   */
  class Request {
  	constructor(input) {
  		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  		let parsedURL;

  		// normalize input
  		if (!isRequest(input)) {
  			if (input && input.href) {
  				// in order to support Node.js' Url objects; though WHATWG's URL objects
  				// will fall into this branch also (since their `toString()` will return
  				// `href` property anyway)
  				parsedURL = parse_url(input.href);
  			} else {
  				// coerce input to a string before attempting to parse
  				parsedURL = parse_url(`${input}`);
  			}
  			input = {};
  		} else {
  			parsedURL = parse_url(input.url);
  		}

  		let method = init.method || input.method || 'GET';
  		method = method.toUpperCase();

  		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
  			throw new TypeError('Request with GET/HEAD method cannot have body');
  		}

  		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

  		Body.call(this, inputBody, {
  			timeout: init.timeout || input.timeout || 0,
  			size: init.size || input.size || 0
  		});

  		const headers = new Headers(init.headers || input.headers || {});

  		if (inputBody != null && !headers.has('Content-Type')) {
  			const contentType = extractContentType(inputBody);
  			if (contentType) {
  				headers.append('Content-Type', contentType);
  			}
  		}

  		let signal = isRequest(input) ? input.signal : null;
  		if ('signal' in init) signal = init.signal;

  		if (signal != null && !isAbortSignal(signal)) {
  			throw new TypeError('Expected signal to be an instanceof AbortSignal');
  		}

  		this[INTERNALS$2] = {
  			method,
  			redirect: init.redirect || input.redirect || 'follow',
  			headers,
  			parsedURL,
  			signal
  		};

  		// node-fetch-only options
  		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
  		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
  		this.counter = init.counter || input.counter || 0;
  		this.agent = init.agent || input.agent;
  	}

  	get method() {
  		return this[INTERNALS$2].method;
  	}

  	get url() {
  		return format_url(this[INTERNALS$2].parsedURL);
  	}

  	get headers() {
  		return this[INTERNALS$2].headers;
  	}

  	get redirect() {
  		return this[INTERNALS$2].redirect;
  	}

  	get signal() {
  		return this[INTERNALS$2].signal;
  	}

  	/**
    * Clone this request
    *
    * @return  Request
    */
  	clone() {
  		return new Request(this);
  	}
  }

  Body.mixIn(Request.prototype);

  Object.defineProperty(Request.prototype, Symbol.toStringTag, {
  	value: 'Request',
  	writable: false,
  	enumerable: false,
  	configurable: true
  });

  Object.defineProperties(Request.prototype, {
  	method: { enumerable: true },
  	url: { enumerable: true },
  	headers: { enumerable: true },
  	redirect: { enumerable: true },
  	clone: { enumerable: true },
  	signal: { enumerable: true }
  });

  /**
   * Convert a Request to Node.js http request options.
   *
   * @param   Request  A Request instance
   * @return  Object   The options object to be passed to http.request
   */
  function getNodeRequestOptions(request) {
  	const parsedURL = request[INTERNALS$2].parsedURL;
  	const headers = new Headers(request[INTERNALS$2].headers);

  	// fetch step 1.3
  	if (!headers.has('Accept')) {
  		headers.set('Accept', '*/*');
  	}

  	// Basic fetch
  	if (!parsedURL.protocol || !parsedURL.hostname) {
  		throw new TypeError('Only absolute URLs are supported');
  	}

  	if (!/^https?:$/.test(parsedURL.protocol)) {
  		throw new TypeError('Only HTTP(S) protocols are supported');
  	}

  	if (request.signal && request.body instanceof Stream__default['default'].Readable && !streamDestructionSupported) {
  		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
  	}

  	// HTTP-network-or-cache fetch steps 2.4-2.7
  	let contentLengthValue = null;
  	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
  		contentLengthValue = '0';
  	}
  	if (request.body != null) {
  		const totalBytes = getTotalBytes(request);
  		if (typeof totalBytes === 'number') {
  			contentLengthValue = String(totalBytes);
  		}
  	}
  	if (contentLengthValue) {
  		headers.set('Content-Length', contentLengthValue);
  	}

  	// HTTP-network-or-cache fetch step 2.11
  	if (!headers.has('User-Agent')) {
  		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
  	}

  	// HTTP-network-or-cache fetch step 2.15
  	if (request.compress && !headers.has('Accept-Encoding')) {
  		headers.set('Accept-Encoding', 'gzip,deflate');
  	}

  	let agent = request.agent;
  	if (typeof agent === 'function') {
  		agent = agent(parsedURL);
  	}

  	if (!headers.has('Connection') && !agent) {
  		headers.set('Connection', 'close');
  	}

  	// HTTP-network fetch step 4.2
  	// chunked encoding is handled by Node.js

  	return Object.assign({}, parsedURL, {
  		method: request.method,
  		headers: exportNodeCompatibleHeaders(headers),
  		agent
  	});
  }

  /**
   * abort-error.js
   *
   * AbortError interface for cancelled requests
   */

  /**
   * Create AbortError instance
   *
   * @param   String      message      Error message for human
   * @return  AbortError
   */
  function AbortError(message) {
    Error.call(this, message);

    this.type = 'aborted';
    this.message = message;

    // hide custom error implementation details from end-users
    Error.captureStackTrace(this, this.constructor);
  }

  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = 'AbortError';

  // fix an issue where "PassThrough", "resolve" aren't a named export for node <10
  const PassThrough$1 = Stream__default['default'].PassThrough;
  const resolve_url = Url__default['default'].resolve;

  /**
   * Fetch function
   *
   * @param   Mixed    url   Absolute url or Request instance
   * @param   Object   opts  Fetch options
   * @return  Promise
   */
  function fetch(url, opts) {

  	// allow custom promise
  	if (!fetch.Promise) {
  		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
  	}

  	Body.Promise = fetch.Promise;

  	// wrap http.request into fetch
  	return new fetch.Promise(function (resolve, reject) {
  		// build request object
  		const request = new Request(url, opts);
  		const options = getNodeRequestOptions(request);

  		const send = (options.protocol === 'https:' ? https__default['default'] : http__default['default']).request;
  		const signal = request.signal;

  		let response = null;

  		const abort = function abort() {
  			let error = new AbortError('The user aborted a request.');
  			reject(error);
  			if (request.body && request.body instanceof Stream__default['default'].Readable) {
  				request.body.destroy(error);
  			}
  			if (!response || !response.body) return;
  			response.body.emit('error', error);
  		};

  		if (signal && signal.aborted) {
  			abort();
  			return;
  		}

  		const abortAndFinalize = function abortAndFinalize() {
  			abort();
  			finalize();
  		};

  		// send request
  		const req = send(options);
  		let reqTimeout;

  		if (signal) {
  			signal.addEventListener('abort', abortAndFinalize);
  		}

  		function finalize() {
  			req.abort();
  			if (signal) signal.removeEventListener('abort', abortAndFinalize);
  			clearTimeout(reqTimeout);
  		}

  		if (request.timeout) {
  			req.once('socket', function (socket) {
  				reqTimeout = setTimeout(function () {
  					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
  					finalize();
  				}, request.timeout);
  			});
  		}

  		req.on('error', function (err) {
  			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
  			finalize();
  		});

  		req.on('response', function (res) {
  			clearTimeout(reqTimeout);

  			const headers = createHeadersLenient(res.headers);

  			// HTTP fetch step 5
  			if (fetch.isRedirect(res.statusCode)) {
  				// HTTP fetch step 5.2
  				const location = headers.get('Location');

  				// HTTP fetch step 5.3
  				const locationURL = location === null ? null : resolve_url(request.url, location);

  				// HTTP fetch step 5.5
  				switch (request.redirect) {
  					case 'error':
  						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
  						finalize();
  						return;
  					case 'manual':
  						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
  						if (locationURL !== null) {
  							// handle corrupted header
  							try {
  								headers.set('Location', locationURL);
  							} catch (err) {
  								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
  								reject(err);
  							}
  						}
  						break;
  					case 'follow':
  						// HTTP-redirect fetch step 2
  						if (locationURL === null) {
  							break;
  						}

  						// HTTP-redirect fetch step 5
  						if (request.counter >= request.follow) {
  							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
  							finalize();
  							return;
  						}

  						// HTTP-redirect fetch step 6 (counter increment)
  						// Create a new Request object.
  						const requestOpts = {
  							headers: new Headers(request.headers),
  							follow: request.follow,
  							counter: request.counter + 1,
  							agent: request.agent,
  							compress: request.compress,
  							method: request.method,
  							body: request.body,
  							signal: request.signal,
  							timeout: request.timeout,
  							size: request.size
  						};

  						// HTTP-redirect fetch step 9
  						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
  							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
  							finalize();
  							return;
  						}

  						// HTTP-redirect fetch step 11
  						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
  							requestOpts.method = 'GET';
  							requestOpts.body = undefined;
  							requestOpts.headers.delete('content-length');
  						}

  						// HTTP-redirect fetch step 15
  						resolve(fetch(new Request(locationURL, requestOpts)));
  						finalize();
  						return;
  				}
  			}

  			// prepare response
  			res.once('end', function () {
  				if (signal) signal.removeEventListener('abort', abortAndFinalize);
  			});
  			let body = res.pipe(new PassThrough$1());

  			const response_options = {
  				url: request.url,
  				status: res.statusCode,
  				statusText: res.statusMessage,
  				headers: headers,
  				size: request.size,
  				timeout: request.timeout,
  				counter: request.counter
  			};

  			// HTTP-network fetch step 12.1.1.3
  			const codings = headers.get('Content-Encoding');

  			// HTTP-network fetch step 12.1.1.4: handle content codings

  			// in following scenarios we ignore compression support
  			// 1. compression support is disabled
  			// 2. HEAD request
  			// 3. no Content-Encoding header
  			// 4. no content response (204)
  			// 5. content not modified response (304)
  			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
  				response = new Response(body, response_options);
  				resolve(response);
  				return;
  			}

  			// For Node v6+
  			// Be less strict when decoding compressed responses, since sometimes
  			// servers send slightly invalid responses that are still accepted
  			// by common browsers.
  			// Always using Z_SYNC_FLUSH is what cURL does.
  			const zlibOptions = {
  				flush: zlib__default['default'].Z_SYNC_FLUSH,
  				finishFlush: zlib__default['default'].Z_SYNC_FLUSH
  			};

  			// for gzip
  			if (codings == 'gzip' || codings == 'x-gzip') {
  				body = body.pipe(zlib__default['default'].createGunzip(zlibOptions));
  				response = new Response(body, response_options);
  				resolve(response);
  				return;
  			}

  			// for deflate
  			if (codings == 'deflate' || codings == 'x-deflate') {
  				// handle the infamous raw deflate response from old servers
  				// a hack for old IIS and Apache servers
  				const raw = res.pipe(new PassThrough$1());
  				raw.once('data', function (chunk) {
  					// see http://stackoverflow.com/questions/37519828
  					if ((chunk[0] & 0x0F) === 0x08) {
  						body = body.pipe(zlib__default['default'].createInflate());
  					} else {
  						body = body.pipe(zlib__default['default'].createInflateRaw());
  					}
  					response = new Response(body, response_options);
  					resolve(response);
  				});
  				return;
  			}

  			// for br
  			if (codings == 'br' && typeof zlib__default['default'].createBrotliDecompress === 'function') {
  				body = body.pipe(zlib__default['default'].createBrotliDecompress());
  				response = new Response(body, response_options);
  				resolve(response);
  				return;
  			}

  			// otherwise, use response as-is
  			response = new Response(body, response_options);
  			resolve(response);
  		});

  		writeToStream(req, request);
  	});
  }
  /**
   * Redirect code matching
   *
   * @param   Number   code  Status code
   * @return  Boolean
   */
  fetch.isRedirect = function (code) {
  	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  };

  // expose Promise
  fetch.Promise = global.Promise;

  var inherits_browser = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function () {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  });

  var inherits = createCommonjsModule(function (module) {
    try {
      var util = require$$0__default['default'];
      /* istanbul ignore next */

      if (typeof util.inherits !== 'function') throw '';
      module.exports = util.inherits;
    } catch (e) {
      /* istanbul ignore next */
      module.exports = inherits_browser;
    }
  });

  var EventEmitter = require$$1__default['default'].EventEmitter;
  var queue = Queue;
  var _default = Queue;

  function Queue(options) {
    if (!(this instanceof Queue)) {
      return new Queue(options);
    }

    EventEmitter.call(this);
    options = options || {};
    this.concurrency = options.concurrency || Infinity;
    this.timeout = options.timeout || 0;
    this.autostart = options.autostart || false;
    this.results = options.results || null;
    this.pending = 0;
    this.session = 0;
    this.running = false;
    this.jobs = [];
    this.timers = {};
  }

  inherits(Queue, EventEmitter);
  var arrayMethods = ['pop', 'shift', 'indexOf', 'lastIndexOf'];
  arrayMethods.forEach(function (method) {
    Queue.prototype[method] = function () {
      return Array.prototype[method].apply(this.jobs, arguments);
    };
  });

  Queue.prototype.slice = function (begin, end) {
    this.jobs = this.jobs.slice(begin, end);
    return this;
  };

  Queue.prototype.reverse = function () {
    this.jobs.reverse();
    return this;
  };

  var arrayAddMethods = ['push', 'unshift', 'splice'];
  arrayAddMethods.forEach(function (method) {
    Queue.prototype[method] = function () {
      var methodResult = Array.prototype[method].apply(this.jobs, arguments);

      if (this.autostart) {
        this.start();
      }

      return methodResult;
    };
  });
  Object.defineProperty(Queue.prototype, 'length', {
    get: function () {
      return this.pending + this.jobs.length;
    }
  });

  Queue.prototype.start = function (cb) {
    if (cb) {
      callOnErrorOrEnd.call(this, cb);
    }

    this.running = true;

    if (this.pending >= this.concurrency) {
      return;
    }

    if (this.jobs.length === 0) {
      if (this.pending === 0) {
        done.call(this);
      }

      return;
    }

    var self = this;
    var job = this.jobs.shift();
    var once = true;
    var session = this.session;
    var timeoutId = null;
    var didTimeout = false;
    var resultIndex = null;
    var timeout = job.hasOwnProperty('timeout') ? job.timeout : this.timeout;

    function next(err, result) {
      if (once && self.session === session) {
        once = false;
        self.pending--;

        if (timeoutId !== null) {
          delete self.timers[timeoutId];
          clearTimeout(timeoutId);
        }

        if (err) {
          self.emit('error', err, job);
        } else if (didTimeout === false) {
          if (resultIndex !== null) {
            self.results[resultIndex] = Array.prototype.slice.call(arguments, 1);
          }

          self.emit('success', result, job);
        }

        if (self.session === session) {
          if (self.pending === 0 && self.jobs.length === 0) {
            done.call(self);
          } else if (self.running) {
            self.start();
          }
        }
      }
    }

    if (timeout) {
      timeoutId = setTimeout(function () {
        didTimeout = true;

        if (self.listeners('timeout').length > 0) {
          self.emit('timeout', next, job);
        } else {
          next();
        }
      }, timeout);
      this.timers[timeoutId] = timeoutId;
    }

    if (this.results) {
      resultIndex = this.results.length;
      this.results[resultIndex] = null;
    }

    this.pending++;
    self.emit('start', job);
    var promise = job(next);

    if (promise && promise.then && typeof promise.then === 'function') {
      promise.then(function (result) {
        return next(null, result);
      }).catch(function (err) {
        return next(err || true);
      });
    }

    if (this.running && this.jobs.length > 0) {
      this.start();
    }
  };

  Queue.prototype.stop = function () {
    this.running = false;
  };

  Queue.prototype.end = function (err) {
    clearTimers.call(this);
    this.jobs.length = 0;
    this.pending = 0;
    done.call(this, err);
  };

  function clearTimers() {
    for (var key in this.timers) {
      var timeoutId = this.timers[key];
      delete this.timers[key];
      clearTimeout(timeoutId);
    }
  }

  function callOnErrorOrEnd(cb) {
    var self = this;
    this.on('error', onerror);
    this.on('end', onend);

    function onerror(err) {
      self.end(err);
    }

    function onend(err) {
      self.removeListener('error', onerror);
      self.removeListener('end', onend);
      cb(err, this.results);
    }
  }

  function done(err) {
    this.session++;
    this.running = false;
    this.emit('end', err);
  }
  queue.default = _default;

  var bmp = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.BMP = void 0;
    exports.BMP = {
      validate(buffer) {
        return 'BM' === buffer.toString('ascii', 0, 2);
      },

      calculate(buffer) {
        return {
          height: Math.abs(buffer.readInt32LE(22)),
          width: buffer.readUInt32LE(18)
        };
      }

    };
  });

  var ico = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ICO = void 0;
    const TYPE_ICON = 1;
    /**
     * ICON Header
     *
     * | Offset | Size | Purpose |
     * | 0	    | 2    | Reserved. Must always be 0.  |
     * | 2      | 2    | Image type: 1 for icon (.ICO) image, 2 for cursor (.CUR) image. Other values are invalid. |
     * | 4      | 2    | Number of images in the file. |
     *
     */

    const SIZE_HEADER = 2 + 2 + 2; // 6

    /**
     * Image Entry
     *
     * | Offset | Size | Purpose |
     * | 0	    | 1    | Image width in pixels. Can be any number between 0 and 255. Value 0 means width is 256 pixels. |
     * | 1      | 1    | Image height in pixels. Can be any number between 0 and 255. Value 0 means height is 256 pixels. |
     * | 2      | 1    | Number of colors in the color palette. Should be 0 if the image does not use a color palette. |
     * | 3      | 1    | Reserved. Should be 0. |
     * | 4      | 2    | ICO format: Color planes. Should be 0 or 1. |
     * |        |      | CUR format: The horizontal coordinates of the hotspot in number of pixels from the left. |
     * | 6      | 2    | ICO format: Bits per pixel. |
     * |        |      | CUR format: The vertical coordinates of the hotspot in number of pixels from the top. |
     * | 8      | 4    | The size of the image's data in bytes |
     * | 12     | 4    | The offset of BMP or PNG data from the beginning of the ICO/CUR file |
     *
     */

    const SIZE_IMAGE_ENTRY = 1 + 1 + 1 + 1 + 2 + 2 + 4 + 4; // 16

    function getSizeFromOffset(buffer, offset) {
      const value = buffer.readUInt8(offset);
      return value === 0 ? 256 : value;
    }

    function getImageSize(buffer, imageIndex) {
      const offset = SIZE_HEADER + imageIndex * SIZE_IMAGE_ENTRY;
      return {
        height: getSizeFromOffset(buffer, offset + 1),
        width: getSizeFromOffset(buffer, offset)
      };
    }

    exports.ICO = {
      validate(buffer) {
        if (buffer.readUInt16LE(0) !== 0) {
          return false;
        }

        return buffer.readUInt16LE(2) === TYPE_ICON;
      },

      calculate(buffer) {
        const nbImages = buffer.readUInt16LE(4);
        const imageSize = getImageSize(buffer, 0);

        if (nbImages === 1) {
          return imageSize;
        }

        const imgs = [imageSize];

        for (let imageIndex = 1; imageIndex < nbImages; imageIndex += 1) {
          imgs.push(getImageSize(buffer, imageIndex));
        }

        const result = {
          height: imageSize.height,
          images: imgs,
          width: imageSize.width
        };
        return result;
      }

    };
  });

  var cur = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CUR = void 0;
    const TYPE_CURSOR = 2;
    exports.CUR = {
      validate(buffer) {
        if (buffer.readUInt16LE(0) !== 0) {
          return false;
        }

        return buffer.readUInt16LE(2) === TYPE_CURSOR;
      },

      calculate(buffer) {
        return ico.ICO.calculate(buffer);
      }

    };
  });

  var dds = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DDS = void 0;
    exports.DDS = {
      validate(buffer) {
        return buffer.readUInt32LE(0) === 0x20534444;
      },

      calculate(buffer) {
        return {
          height: buffer.readUInt32LE(12),
          width: buffer.readUInt32LE(16)
        };
      }

    };
  });

  var gif = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.GIF = void 0;
    const gifRegexp = /^GIF8[79]a/;
    exports.GIF = {
      validate(buffer) {
        const signature = buffer.toString('ascii', 0, 6);
        return gifRegexp.test(signature);
      },

      calculate(buffer) {
        return {
          height: buffer.readUInt16LE(8),
          width: buffer.readUInt16LE(6)
        };
      }

    };
  });

  var icns = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ICNS = void 0;
    /**
     * ICNS Header
     *
     * | Offset | Size | Purpose                                                |
     * | 0	    | 4    | Magic literal, must be "icns" (0x69, 0x63, 0x6e, 0x73) |
     * | 4      | 4    | Length of file, in bytes, msb first.                   |
     *
     */

    const SIZE_HEADER = 4 + 4; // 8

    const FILE_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN

    /**
     * Image Entry
     *
     * | Offset | Size | Purpose                                                          |
     * | 0	    | 4    | Icon type, see OSType below.                                     |
     * | 4      | 4    | Length of data, in bytes (including type and length), msb first. |
     * | 8      | n    | Icon data                                                        |
     */

    const ENTRY_LENGTH_OFFSET = 4; // MSB => BIG ENDIAN

    const ICON_TYPE_SIZE = {
      ICON: 32,
      'ICN#': 32,
      // m => 16 x 16
      'icm#': 16,
      icm4: 16,
      icm8: 16,
      // s => 16 x 16
      'ics#': 16,
      ics4: 16,
      ics8: 16,
      is32: 16,
      s8mk: 16,
      icp4: 16,
      // l => 32 x 32
      icl4: 32,
      icl8: 32,
      il32: 32,
      l8mk: 32,
      icp5: 32,
      ic11: 32,
      // h => 48 x 48
      ich4: 48,
      ich8: 48,
      ih32: 48,
      h8mk: 48,
      // . => 64 x 64
      icp6: 64,
      ic12: 32,
      // t => 128 x 128
      it32: 128,
      t8mk: 128,
      ic07: 128,
      // . => 256 x 256
      ic08: 256,
      ic13: 256,
      // . => 512 x 512
      ic09: 512,
      ic14: 512,
      // . => 1024 x 1024
      ic10: 1024
    };

    function readImageHeader(buffer, imageOffset) {
      const imageLengthOffset = imageOffset + ENTRY_LENGTH_OFFSET;
      return [buffer.toString('ascii', imageOffset, imageLengthOffset), buffer.readUInt32BE(imageLengthOffset)];
    }

    function getImageSize(type) {
      const size = ICON_TYPE_SIZE[type];
      return {
        width: size,
        height: size,
        type
      };
    }

    exports.ICNS = {
      validate(buffer) {
        return 'icns' === buffer.toString('ascii', 0, 4);
      },

      calculate(buffer) {
        const bufferLength = buffer.length;
        const fileLength = buffer.readUInt32BE(FILE_LENGTH_OFFSET);
        let imageOffset = SIZE_HEADER;
        let imageHeader = readImageHeader(buffer, imageOffset);
        let imageSize = getImageSize(imageHeader[0]);
        imageOffset += imageHeader[1];

        if (imageOffset === fileLength) {
          return imageSize;
        }

        const result = {
          height: imageSize.height,
          images: [imageSize],
          width: imageSize.width
        };

        while (imageOffset < fileLength && imageOffset < bufferLength) {
          imageHeader = readImageHeader(buffer, imageOffset);
          imageSize = getImageSize(imageHeader[0]);
          imageOffset += imageHeader[1];
          result.images.push(imageSize);
        }

        return result;
      }

    };
  });

  var j2c = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.J2C = void 0;
    exports.J2C = {
      validate(buffer) {
        // TODO: this doesn't seem right. SIZ marker doesn't have to be right after the SOC
        return buffer.toString('hex', 0, 4) === 'ff4fff51';
      },

      calculate(buffer) {
        return {
          height: buffer.readUInt32BE(12),
          width: buffer.readUInt32BE(8)
        };
      }

    };
  });

  var jp2 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JP2 = void 0;
    const BoxTypes = {
      ftyp: '66747970',
      ihdr: '69686472',
      jp2h: '6a703268',
      jp__: '6a502020',
      rreq: '72726571',
      xml_: '786d6c20'
    };

    const calculateRREQLength = box => {
      const unit = box.readUInt8(0);
      let offset = 1 + 2 * unit;
      const numStdFlags = box.readUInt16BE(offset);
      const flagsLength = numStdFlags * (2 + unit);
      offset = offset + 2 + flagsLength;
      const numVendorFeatures = box.readUInt16BE(offset);
      const featuresLength = numVendorFeatures * (16 + unit);
      return offset + 2 + featuresLength;
    };

    const parseIHDR = box => {
      return {
        height: box.readUInt32BE(4),
        width: box.readUInt32BE(8)
      };
    };

    exports.JP2 = {
      validate(buffer) {
        const signature = buffer.toString('hex', 4, 8);
        const signatureLength = buffer.readUInt32BE(0);

        if (signature !== BoxTypes.jp__ || signatureLength < 1) {
          return false;
        }

        const ftypeBoxStart = signatureLength + 4;
        const ftypBoxLength = buffer.readUInt32BE(signatureLength);
        const ftypBox = buffer.slice(ftypeBoxStart, ftypeBoxStart + ftypBoxLength);
        return ftypBox.toString('hex', 0, 4) === BoxTypes.ftyp;
      },

      calculate(buffer) {
        const signatureLength = buffer.readUInt32BE(0);
        const ftypBoxLength = buffer.readUInt16BE(signatureLength + 2);
        let offset = signatureLength + 4 + ftypBoxLength;
        const nextBoxType = buffer.toString('hex', offset, offset + 4);

        switch (nextBoxType) {
          case BoxTypes.rreq:
            // WHAT ARE THESE 4 BYTES?????
            // eslint-disable-next-line no-case-declarations
            const MAGIC = 4;
            offset = offset + 4 + MAGIC + calculateRREQLength(buffer.slice(offset + 4));
            return parseIHDR(buffer.slice(offset + 8, offset + 24));

          case BoxTypes.jp2h:
            return parseIHDR(buffer.slice(offset + 8, offset + 24));

          default:
            throw new TypeError('Unsupported header found: ' + buffer.toString('ascii', offset, offset + 4));
        }
      }

    };
  });

  var readUInt_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.readUInt = void 0; // Abstract reading multi-byte unsigned integers

    function readUInt(buffer, bits, offset, isBigEndian) {
      offset = offset || 0;
      const endian = isBigEndian ? 'BE' : 'LE';
      const methodName = 'readUInt' + bits + endian;
      return buffer[methodName].call(buffer, offset);
    }

    exports.readUInt = readUInt;
  });

  var jpg = createCommonjsModule(function (module, exports) {
    // due to the structure of the loader class, we only get a buffer
    // with a maximum size of 4096 bytes. so if the SOF marker is outside
    // if this range we can't detect the file size correctly.

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.JPG = void 0;
    const EXIF_MARKER = '45786966';
    const APP1_DATA_SIZE_BYTES = 2;
    const EXIF_HEADER_BYTES = 6;
    const TIFF_BYTE_ALIGN_BYTES = 2;
    const BIG_ENDIAN_BYTE_ALIGN = '4d4d';
    const LITTLE_ENDIAN_BYTE_ALIGN = '4949'; // Each entry is exactly 12 bytes

    const IDF_ENTRY_BYTES = 12;
    const NUM_DIRECTORY_ENTRIES_BYTES = 2;

    function isEXIF(buffer) {
      return buffer.toString('hex', 2, 6) === EXIF_MARKER;
    }

    function extractSize(buffer, index) {
      return {
        height: buffer.readUInt16BE(index),
        width: buffer.readUInt16BE(index + 2)
      };
    }

    function extractOrientation(exifBlock, isBigEndian) {
      // TODO: assert that this contains 0x002A
      // let STATIC_MOTOROLA_TIFF_HEADER_BYTES = 2
      // let TIFF_IMAGE_FILE_DIRECTORY_BYTES = 4
      // TODO: derive from TIFF_IMAGE_FILE_DIRECTORY_BYTES
      const idfOffset = 8; // IDF osset works from right after the header bytes
      // (so the offset includes the tiff byte align)

      const offset = EXIF_HEADER_BYTES + idfOffset;
      const idfDirectoryEntries = readUInt_1.readUInt(exifBlock, 16, offset, isBigEndian);

      for (let directoryEntryNumber = 0; directoryEntryNumber < idfDirectoryEntries; directoryEntryNumber++) {
        const start = offset + NUM_DIRECTORY_ENTRIES_BYTES + directoryEntryNumber * IDF_ENTRY_BYTES;
        const end = start + IDF_ENTRY_BYTES; // Skip on corrupt EXIF blocks

        if (start > exifBlock.length) {
          return;
        }

        const block = exifBlock.slice(start, end);
        const tagNumber = readUInt_1.readUInt(block, 16, 0, isBigEndian); // 0x0112 (decimal: 274) is the `orientation` tag ID

        if (tagNumber === 274) {
          const dataFormat = readUInt_1.readUInt(block, 16, 2, isBigEndian);

          if (dataFormat !== 3) {
            return;
          } // unsinged int has 2 bytes per component
          // if there would more than 4 bytes in total it's a pointer


          const numberOfComponents = readUInt_1.readUInt(block, 32, 4, isBigEndian);

          if (numberOfComponents !== 1) {
            return;
          }

          return readUInt_1.readUInt(block, 16, 8, isBigEndian);
        }
      }
    }

    function validateExifBlock(buffer, index) {
      // Skip APP1 Data Size
      const exifBlock = buffer.slice(APP1_DATA_SIZE_BYTES, index); // Consider byte alignment

      const byteAlign = exifBlock.toString('hex', EXIF_HEADER_BYTES, EXIF_HEADER_BYTES + TIFF_BYTE_ALIGN_BYTES); // Ignore Empty EXIF. Validate byte alignment

      const isBigEndian = byteAlign === BIG_ENDIAN_BYTE_ALIGN;
      const isLittleEndian = byteAlign === LITTLE_ENDIAN_BYTE_ALIGN;

      if (isBigEndian || isLittleEndian) {
        return extractOrientation(exifBlock, isBigEndian);
      }
    }

    function validateBuffer(buffer, index) {
      // index should be within buffer limits
      if (index > buffer.length) {
        throw new TypeError('Corrupt JPG, exceeded buffer limits');
      } // Every JPEG block must begin with a 0xFF


      if (buffer[index] !== 0xFF) {
        throw new TypeError('Invalid JPG, marker table corrupted');
      }
    }

    exports.JPG = {
      validate(buffer) {
        const SOIMarker = buffer.toString('hex', 0, 2);
        return 'ffd8' === SOIMarker;
      },

      calculate(buffer) {
        // Skip 4 chars, they are for signature
        buffer = buffer.slice(4);
        let orientation;
        let next;

        while (buffer.length) {
          // read length of the next block
          const i = buffer.readUInt16BE(0);

          if (isEXIF(buffer)) {
            orientation = validateExifBlock(buffer, i);
          } // ensure correct format


          validateBuffer(buffer, i); // 0xFFC0 is baseline standard(SOF)
          // 0xFFC1 is baseline optimized(SOF)
          // 0xFFC2 is progressive(SOF2)

          next = buffer[i + 1];

          if (next === 0xC0 || next === 0xC1 || next === 0xC2) {
            const size = extractSize(buffer, i + 5); // TODO: is orientation=0 a valid answer here?

            if (!orientation) {
              return size;
            }

            return {
              height: size.height,
              orientation,
              width: size.width
            };
          } // move to the next block


          buffer = buffer.slice(i + 2);
        }

        throw new TypeError('Invalid JPG, no size found');
      }

    };
  });

  var ktx = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.KTX = void 0;
    const SIGNATURE = 'KTX 11';
    exports.KTX = {
      validate(buffer) {
        return SIGNATURE === buffer.toString('ascii', 1, 7);
      },

      calculate(buffer) {
        return {
          height: buffer.readUInt32LE(40),
          width: buffer.readUInt32LE(36)
        };
      }

    };
  });

  var png = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PNG = void 0;
    const pngSignature = 'PNG\r\n\x1a\n';
    const pngImageHeaderChunkName = 'IHDR'; // Used to detect "fried" png's: http://www.jongware.com/pngdefry.html

    const pngFriedChunkName = 'CgBI';
    exports.PNG = {
      validate(buffer) {
        if (pngSignature === buffer.toString('ascii', 1, 8)) {
          let chunkName = buffer.toString('ascii', 12, 16);

          if (chunkName === pngFriedChunkName) {
            chunkName = buffer.toString('ascii', 28, 32);
          }

          if (chunkName !== pngImageHeaderChunkName) {
            throw new TypeError('Invalid PNG');
          }

          return true;
        }

        return false;
      },

      calculate(buffer) {
        if (buffer.toString('ascii', 12, 16) === pngFriedChunkName) {
          return {
            height: buffer.readUInt32BE(36),
            width: buffer.readUInt32BE(32)
          };
        }

        return {
          height: buffer.readUInt32BE(20),
          width: buffer.readUInt32BE(16)
        };
      }

    };
  });

  var pnm = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PNM = void 0;
    const PNMTypes = {
      P1: 'pbm/ascii',
      P2: 'pgm/ascii',
      P3: 'ppm/ascii',
      P4: 'pbm',
      P5: 'pgm',
      P6: 'ppm',
      P7: 'pam',
      PF: 'pfm'
    };
    const Signatures = Object.keys(PNMTypes);
    const handlers = {
      default: lines => {
        let dimensions = [];

        while (lines.length > 0) {
          const line = lines.shift();

          if (line[0] === '#') {
            continue;
          }

          dimensions = line.split(' ');
          break;
        }

        if (dimensions.length === 2) {
          return {
            height: parseInt(dimensions[1], 10),
            width: parseInt(dimensions[0], 10)
          };
        } else {
          throw new TypeError('Invalid PNM');
        }
      },
      pam: lines => {
        const size = {};

        while (lines.length > 0) {
          const line = lines.shift();

          if (line.length > 16 || line.charCodeAt(0) > 128) {
            continue;
          }

          const [key, value] = line.split(' ');

          if (key && value) {
            size[key.toLowerCase()] = parseInt(value, 10);
          }

          if (size.height && size.width) {
            break;
          }
        }

        if (size.height && size.width) {
          return {
            height: size.height,
            width: size.width
          };
        } else {
          throw new TypeError('Invalid PAM');
        }
      }
    };
    exports.PNM = {
      validate(buffer) {
        const signature = buffer.toString('ascii', 0, 2);
        return Signatures.includes(signature);
      },

      calculate(buffer) {
        const signature = buffer.toString('ascii', 0, 2);
        const type = PNMTypes[signature]; // TODO: this probably generates garbage. move to a stream based parser

        const lines = buffer.toString('ascii', 3).split(/[\r\n]+/);
        const handler = handlers[type] || handlers.default;
        return handler(lines);
      }

    };
  });

  var psd = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PSD = void 0;
    exports.PSD = {
      validate(buffer) {
        return '8BPS' === buffer.toString('ascii', 0, 4);
      },

      calculate(buffer) {
        return {
          height: buffer.readUInt32BE(14),
          width: buffer.readUInt32BE(18)
        };
      }

    };
  });

  var svg = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SVG = void 0;
    const svgReg = /<svg\s([^>"']|"[^"]*"|'[^']*')*>/;
    const extractorRegExps = {
      height: /\sheight=(['"])([^%]+?)\1/,
      root: svgReg,
      viewbox: /\sviewBox=(['"])(.+?)\1/i,
      width: /\swidth=(['"])([^%]+?)\1/
    };
    const INCH_CM = 2.54;
    const units = {
      in: 96,
      cm: 96 / INCH_CM,
      em: 16,
      ex: 8,
      m: 96 / INCH_CM * 100,
      mm: 96 / INCH_CM / 10,
      pc: 96 / 72 / 12,
      pt: 96 / 72,
      px: 1
    };
    const unitsReg = new RegExp(`^([0-9.]+(?:e\\d+)?)(${Object.keys(units).join('|')})?$`);

    function parseLength(len) {
      const m = unitsReg.exec(len);

      if (!m) {
        return undefined;
      }

      return Math.round(Number(m[1]) * (units[m[2]] || 1));
    }

    function parseViewbox(viewbox) {
      const bounds = viewbox.split(' ');
      return {
        height: parseLength(bounds[3]),
        width: parseLength(bounds[2])
      };
    }

    function parseAttributes(root) {
      const width = root.match(extractorRegExps.width);
      const height = root.match(extractorRegExps.height);
      const viewbox = root.match(extractorRegExps.viewbox);
      return {
        height: height && parseLength(height[2]),
        viewbox: viewbox && parseViewbox(viewbox[2]),
        width: width && parseLength(width[2])
      };
    }

    function calculateByDimensions(attrs) {
      return {
        height: attrs.height,
        width: attrs.width
      };
    }

    function calculateByViewbox(attrs, viewbox) {
      const ratio = viewbox.width / viewbox.height;

      if (attrs.width) {
        return {
          height: Math.floor(attrs.width / ratio),
          width: attrs.width
        };
      }

      if (attrs.height) {
        return {
          height: attrs.height,
          width: Math.floor(attrs.height * ratio)
        };
      }

      return {
        height: viewbox.height,
        width: viewbox.width
      };
    }

    exports.SVG = {
      validate(buffer) {
        const str = String(buffer);
        return svgReg.test(str);
      },

      calculate(buffer) {
        const root = buffer.toString('utf8').match(extractorRegExps.root);

        if (root) {
          const attrs = parseAttributes(root[0]);

          if (attrs.width && attrs.height) {
            return calculateByDimensions(attrs);
          }

          if (attrs.viewbox) {
            return calculateByViewbox(attrs, attrs.viewbox);
          }
        }

        throw new TypeError('Invalid SVG');
      }

    };
  });

  var tiff = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.TIFF = void 0; // based on http://www.compix.com/fileformattif.htm
    // TO-DO: support big-endian as well
    // Read IFD (image-file-directory) into a buffer

    function readIFD(buffer, filepath, isBigEndian) {
      const ifdOffset = readUInt_1.readUInt(buffer, 32, 4, isBigEndian); // read only till the end of the file

      let bufferSize = 1024;
      const fileSize = fs__default['default'].statSync(filepath).size;

      if (ifdOffset + bufferSize > fileSize) {
        bufferSize = fileSize - ifdOffset - 10;
      } // populate the buffer


      const endBuffer = Buffer.alloc(bufferSize);
      const descriptor = fs__default['default'].openSync(filepath, 'r');
      fs__default['default'].readSync(descriptor, endBuffer, 0, bufferSize, ifdOffset);
      fs__default['default'].closeSync(descriptor);
      return endBuffer.slice(2);
    } // TIFF values seem to be messed up on Big-Endian, this helps


    function readValue(buffer, isBigEndian) {
      const low = readUInt_1.readUInt(buffer, 16, 8, isBigEndian);
      const high = readUInt_1.readUInt(buffer, 16, 10, isBigEndian);
      return (high << 16) + low;
    } // move to the next tag


    function nextTag(buffer) {
      if (buffer.length > 24) {
        return buffer.slice(12);
      }
    } // Extract IFD tags from TIFF metadata


    function extractTags(buffer, isBigEndian) {
      const tags = {};
      let temp = buffer;

      while (temp && temp.length) {
        const code = readUInt_1.readUInt(temp, 16, 0, isBigEndian);
        const type = readUInt_1.readUInt(temp, 16, 2, isBigEndian);
        const length = readUInt_1.readUInt(temp, 32, 4, isBigEndian); // 0 means end of IFD

        if (code === 0) {
          break;
        } else {
          // 256 is width, 257 is height
          // if (code === 256 || code === 257) {
          if (length === 1 && (type === 3 || type === 4)) {
            tags[code] = readValue(temp, isBigEndian);
          } // move to the next tag


          temp = nextTag(temp);
        }
      }

      return tags;
    } // Test if the TIFF is Big Endian or Little Endian


    function determineEndianness(buffer) {
      const signature = buffer.toString('ascii', 0, 2);

      if ('II' === signature) {
        return 'LE';
      } else if ('MM' === signature) {
        return 'BE';
      }
    }

    const signatures = [// '492049', // currently not supported
    '49492a00', '4d4d002a' // Big Endian
    // '4d4d002a', // BigTIFF > 4GB. currently not supported
    ];
    exports.TIFF = {
      validate(buffer) {
        return signatures.includes(buffer.toString('hex', 0, 4));
      },

      calculate(buffer, filepath) {
        if (!filepath) {
          throw new TypeError('Tiff doesn\'t support buffer');
        } // Determine BE/LE


        const isBigEndian = determineEndianness(buffer) === 'BE'; // read the IFD

        const ifdBuffer = readIFD(buffer, filepath, isBigEndian); // extract the tags from the IFD

        const tags = extractTags(ifdBuffer, isBigEndian);
        const width = tags[256];
        const height = tags[257];

        if (!width || !height) {
          throw new TypeError('Invalid Tiff. Missing tags');
        }

        return {
          height,
          width
        };
      }

    };
  });

  var webp = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WEBP = void 0;

    function calculateExtended(buffer) {
      return {
        height: 1 + buffer.readUIntLE(7, 3),
        width: 1 + buffer.readUIntLE(4, 3)
      };
    }

    function calculateLossless(buffer) {
      return {
        height: 1 + ((buffer[4] & 0xF) << 10 | buffer[3] << 2 | (buffer[2] & 0xC0) >> 6),
        width: 1 + ((buffer[2] & 0x3F) << 8 | buffer[1])
      };
    }

    function calculateLossy(buffer) {
      // `& 0x3fff` returns the last 14 bits
      // TO-DO: include webp scaling in the calculations
      return {
        height: buffer.readInt16LE(8) & 0x3fff,
        width: buffer.readInt16LE(6) & 0x3fff
      };
    }

    exports.WEBP = {
      validate(buffer) {
        const riffHeader = 'RIFF' === buffer.toString('ascii', 0, 4);
        const webpHeader = 'WEBP' === buffer.toString('ascii', 8, 12);
        const vp8Header = 'VP8' === buffer.toString('ascii', 12, 15);
        return riffHeader && webpHeader && vp8Header;
      },

      calculate(buffer) {
        const chunkHeader = buffer.toString('ascii', 12, 16);
        buffer = buffer.slice(20, 30); // Extended webp stream signature

        if (chunkHeader === 'VP8X') {
          const extendedHeader = buffer[0];
          const validStart = (extendedHeader & 0xc0) === 0;
          const validEnd = (extendedHeader & 0x01) === 0;

          if (validStart && validEnd) {
            return calculateExtended(buffer);
          } else {
            // TODO: breaking change
            throw new TypeError('Invalid WebP');
          }
        } // Lossless webp stream signature


        if (chunkHeader === 'VP8 ' && buffer[0] !== 0x2f) {
          return calculateLossy(buffer);
        } // Lossy webp stream signature


        const signature = buffer.toString('hex', 3, 6);

        if (chunkHeader === 'VP8L' && signature !== '9d012a') {
          return calculateLossless(buffer);
        }

        throw new TypeError('Invalid WebP');
      }

    };
  });

  var types = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.typeHandlers = void 0; // load all available handlers explicitely for browserify support

    exports.typeHandlers = {
      bmp: bmp.BMP,
      cur: cur.CUR,
      dds: dds.DDS,
      gif: gif.GIF,
      icns: icns.ICNS,
      ico: ico.ICO,
      j2c: j2c.J2C,
      jp2: jp2.JP2,
      jpg: jpg.JPG,
      ktx: ktx.KTX,
      png: png.PNG,
      pnm: pnm.PNM,
      psd: psd.PSD,
      svg: svg.SVG,
      tiff: tiff.TIFF,
      webp: webp.WEBP
    };
  });

  var detector_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.detector = void 0;
    const keys = Object.keys(types.typeHandlers); // This map helps avoid validating for every single image type

    const firstBytes = {
      0x38: 'psd',
      0x42: 'bmp',
      0x44: 'dds',
      0x47: 'gif',
      0x49: 'tiff',
      0x4d: 'tiff',
      0x52: 'webp',
      0x69: 'icns',
      0x89: 'png',
      0xff: 'jpg'
    };

    function detector(buffer) {
      const byte = buffer[0];

      if (byte in firstBytes) {
        const type = firstBytes[byte];

        if (type && types.typeHandlers[type].validate(buffer)) {
          return type;
        }
      }

      const finder = key => types.typeHandlers[key].validate(buffer);

      return keys.find(finder);
    }

    exports.detector = detector;
  });

  var dist = createCommonjsModule(function (module, exports) {

    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.types = exports.setConcurrency = exports.disableTypes = exports.disableFS = exports.imageSize = void 0; // Maximum buffer size, with a default of 512 kilobytes.
    // TO-DO: make this adaptive based on the initial signature of the image

    const MaxBufferSize = 512 * 1024; // This queue is for async `fs` operations, to avoid reaching file-descriptor limits

    const queue$1 = new queue.default({
      concurrency: 100,
      autostart: true
    });
    const globalOptions = {
      disabledFS: false,
      disabledTypes: []
    };
    /**
     * Return size information based on a buffer
     *
     * @param {Buffer} buffer
     * @param {String} filepath
     * @returns {Object}
     */

    function lookup(buffer, filepath) {
      // detect the file type.. don't rely on the extension
      const type = detector_1.detector(buffer);

      if (typeof type !== 'undefined') {
        if (globalOptions.disabledTypes.indexOf(type) > -1) {
          throw new TypeError('disabled file type: ' + type);
        } // find an appropriate handler for this file type


        if (type in types.typeHandlers) {
          const size = types.typeHandlers[type].calculate(buffer, filepath);

          if (size !== undefined) {
            size.type = type;
            return size;
          }
        }
      } // throw up, if we don't understand the file


      throw new TypeError('unsupported file type: ' + type + ' (file: ' + filepath + ')');
    }
    /**
     * Reads a file into a buffer.
     * @param {String} filepath
     * @returns {Promise<Buffer>}
     */


    function asyncFileToBuffer(filepath) {
      return __awaiter(this, void 0, void 0, function* () {
        const handle = yield fs__default['default'].promises.open(filepath, 'r');
        const {
          size
        } = yield handle.stat();

        if (size <= 0) {
          yield handle.close();
          throw new Error('Empty file');
        }

        const bufferSize = Math.min(size, MaxBufferSize);
        const buffer = Buffer.alloc(bufferSize);
        yield handle.read(buffer, 0, bufferSize, 0);
        yield handle.close();
        return buffer;
      });
    }
    /**
     * Synchronously reads a file into a buffer, blocking the nodejs process.
     *
     * @param {String} filepath
     * @returns {Buffer}
     */


    function syncFileToBuffer(filepath) {
      // read from the file, synchronously
      const descriptor = fs__default['default'].openSync(filepath, 'r');
      const {
        size
      } = fs__default['default'].fstatSync(descriptor);

      if (size <= 0) {
        fs__default['default'].closeSync(descriptor);
        throw new Error('Empty file');
      }

      const bufferSize = Math.min(size, MaxBufferSize);
      const buffer = Buffer.alloc(bufferSize);
      fs__default['default'].readSync(descriptor, buffer, 0, bufferSize, 0);
      fs__default['default'].closeSync(descriptor);
      return buffer;
    } // eslint-disable-next-line @typescript-eslint/no-use-before-define


    module.exports = exports = imageSize; // backwards compatibility

    exports.default = imageSize;
    /**
     * @param {Buffer|string} input - buffer or relative/absolute path of the image file
     * @param {Function=} [callback] - optional function for async detection
     */

    function imageSize(input, callback) {
      // Handle buffer input
      if (Buffer.isBuffer(input)) {
        return lookup(input);
      } // input should be a string at this point


      if (typeof input !== 'string' || globalOptions.disabledFS) {
        throw new TypeError('invalid invocation. input should be a Buffer');
      } // resolve the file path


      const filepath = path__default['default'].resolve(input);

      if (typeof callback === 'function') {
        queue$1.push(() => asyncFileToBuffer(filepath).then(buffer => process.nextTick(callback, null, lookup(buffer, filepath))).catch(callback));
      } else {
        const buffer = syncFileToBuffer(filepath);
        return lookup(buffer, filepath);
      }
    }

    exports.imageSize = imageSize;

    const disableFS = v => {
      globalOptions.disabledFS = v;
    };

    exports.disableFS = disableFS;

    const disableTypes = types => {
      globalOptions.disabledTypes = types;
    };

    exports.disableTypes = disableTypes;

    const setConcurrency = c => {
      queue$1.concurrency = c;
    };

    exports.setConcurrency = setConcurrency;
    exports.types = Object.keys(types.typeHandlers);
  });
  var sizeOf = /*@__PURE__*/getDefaultExportFromCjs(dist);

  const arrayChunk = (arr, size) => arr.length > size ? [arr.slice(0, size), ...arrayChunk(arr.slice(size), size)] : [arr];

  const getImageSize = file => {
    const {
      width,
      height,
      type
    } = sizeOf(file);
    return {
      width,
      height,
      type
    };
  };
  /* loadImage
     =========================================== */


  const remoteImageCache = new nodeCache();

  const loadRemoteImage = async src => {
    const cachedImage = remoteImageCache.get(src);

    if (typeof cachedImage === "undefined") {
      const response = await fetch(src);
      const buffer = await response.buffer();
      remoteImageCache.set(src, buffer);
      return buffer;
    }

    if (!Buffer.isBuffer(cachedImage)) throw Error(`Cached value for ${src} is invalid.`);
    return cachedImage;
  };

  const loadImage = async imagePath => {
    if (Buffer.isBuffer(imagePath)) {
      const imageSize = getImageSize(imagePath);
      return {
        file: imagePath,
        img: _extends({
          src: null
        }, imageSize)
      };
    }

    if (imagePath.startsWith("http")) {
      const buffer = await loadRemoteImage(imagePath);
      const imageSize = getImageSize(buffer);
      return {
        file: buffer,
        img: _extends({
          src: imagePath
        }, imageSize)
      };
    }

    if (!imagePath.startsWith("/")) throw new Error(`Failed to parse src \"${imagePath}\", if using relative image it must start with a leading slash "/"`);
    const file = path__default['default'].join("./public/", imagePath);
    const imageSize = getImageSize(file);
    return {
      file,
      img: _extends({
        src: imagePath
      }, imageSize)
    };
  };

  const optimizeImage = async (src, options = {
    size: 4
  }) => {
    const sizeMin = 4;
    const sizeMax = 64;
    const isSizeValid = sizeMin <= options.size && options.size <= sizeMax;
    !isSizeValid && console.error(["Please enter a `size` value between", sizeMin, "and", sizeMax].join(" "));
    const size = isSizeValid ? options.size : 4;
    const pipeline = sharp__default['default'](src).resize(size, size, {
      fit: "inside"
    });
    const getOptimizedForBase64 = pipeline.clone().normalise().modulate({
      saturation: 1.2,
      brightness: 1
    }).removeAlpha().toBuffer({
      resolveWithObject: true
    });
    const getOptimizedForBlurhash = pipeline.clone().raw().ensureAlpha().toBuffer({
      resolveWithObject: true
    });
    const getOptimizedForPixels = pipeline.clone().raw().toBuffer({
      resolveWithObject: true
    });
    return Promise.all([getOptimizedForBase64, getOptimizedForBlurhash, getOptimizedForPixels]).then(values => values.map(value => {
      const {
        channels,
        width
      } = value.info;
      const rawBuffer = [].concat(...value.data);
      const pixels = arrayChunk(rawBuffer, channels);
      const rows = arrayChunk(pixels, width);
      return _extends({}, value, {
        rawBuffer,
        rows
      });
    })).then(values => ({
      optimizedForBase64: values[0],
      optimizedForBlurhash: values[1],
      optimizedForCSS: values[2],
      optimizedForSVG: values[2]
    })).catch(err => {
      console.error("transform failed", err);
      throw err;
    });
  };

  const getImage = async (src, options) => {
    const {
      file,
      img
    } = await loadImage(src);
    const optimized = await optimizeImage(file, options);
    return _extends({
      img
    }, optimized);
  };

  const rgb = channels => `rgb(${channels.slice(0, 3).join(",")})`;

  const alphaToOpacity = alpha => alpha / 255 * 100 / 100;

  const getSVG = ({
    data,
    info,
    rawBuffer
  }) => {
    const {
      channels,
      width,
      height
    } = info;
    const pixels = arrayChunk(rawBuffer, channels).map(value => {
      const channelToProps = {
        3: {
          fill: rgb(value),
          fillOpacity: 1
        },
        4: {
          fill: rgb(value),
          fillOpacity: alphaToOpacity(value[3])
        }
      };

      if (!channelToProps.hasOwnProperty(channels)) {
        throw new Error(`Images with ${channels} channels aren't currently supported`);
      }

      return channelToProps[channels];
    });
    const chunkRects = arrayChunk(pixels, width).map((row, y) => row.map((col, x) => ["rect", _extends({}, col, {
      width: 1,
      height: 1,
      x,
      y
    })]));

    if (chunkRects.length !== height) {
      console.error("Woops! Something went wrong here and caused the color height to differ from the source height.");
    }

    const rects = [].concat(...chunkRects);
    return ["svg", {
      xmlns: "http://www.w3.org/2000/svg",
      width: "100%",
      height: "100%",
      shapeRendering: "crispEdges",
      preserveAspectRatio: "none",
      viewBox: `0 0 ${width} ${height}`,
      style: {
        position: "absolute",
        top: "50%",
        left: "50%",
        transformOrigin: "top left",
        transform: "translate(-50%, -50%)",
        right: 0,
        bottom: 0
      }
    }, rects];
  };

  const getPlaiceholder = async (src, options) => {
    const {
      img,
      optimizedForBase64,
      optimizedForBlurhash,
      optimizedForCSS,
      optimizedForSVG
    } = await getImage(src, options);
    return Promise.all([getBase64(optimizedForBase64), getBlurhash(optimizedForBlurhash), getCSS(optimizedForCSS), getSVG(optimizedForSVG)]).then(values => {
      const [base64, blurhash, css, svg] = values;
      return {
        img,
        css,
        base64,
        blurhash,
        svg
      };
    });
  };

  const ACCEPTED_FILE_TYPES = ["jpeg", "png"];

  exports.ACCEPTED_FILE_TYPES = ACCEPTED_FILE_TYPES;
  exports.getPlaiceholder = getPlaiceholder;

})));
//# sourceMappingURL=index.umd.js.map
